<?xml version='1.0' encoding='UTF-8'?>
<model xmlns="http://ccl.northwestern.edu/netlogo/6.1"><version><![CDATA[NetLogo 6.0.2]]></version><previewCommands><compiled><![CDATA[setup-periodic-quilt
repeat 1000 [ go ]]]></compiled></previewCommands><info><![CDATA[## WHAT IS IT?

This model demonstrates a very simple chaotic system consisting of a ball bouncing inside a rectangular room with circular obstacles in it. The system can exhibit periodic behavior (in which the ball bounces in a repeating pattern), but primarily exhibits chaotic behavior.

Chaotic behavior means that any tiny change in the initial conditions (in this case, the position and heading of the ball) results in dramatically different behavior over time. Chaotic behavior makes systems very difficult to predict precisely: in order to accurately predict a chaotic system, one must have exact measurements of the system's initial conditions. However, measuring a system to that degree of accuracy is, in general, impossible.

## HOW IT WORKS

The ball bounces off the walls and obstacles. The collisions are all perfectly elastic and the obstacles remain stationary. Finally, there is no friction. This means that the balls never change speed, only direction. Note that the balls do not bounce off each other; multiple balls are just to show what happens when there are very small differences in initial position.

Collisions are detected when the ball overlaps an obstacle or the edge of the world. The position is then corrected (see the NetLogo Features section below for a more detailed discussion). Finally, because the collisions are perfectly elastic, the ball's new angle is the angle of reflection of its heading around the surface it's colliding with.

## HOW TO USE IT

Use the NUM-OBSTACLES slider to adjust the number of obstacles when using SETUP-RANDOM. With 0 obstacles, the system will *always* be periodic. Can you figure out why?

If TWO-BALLS? is on, the setup buttons will create an additional ball that will be in almost, but not quite, the same position as the first ball. Running the system with two balls will show how dramatic of an effect slight changes in initial conditions can have in chaotic systems.

Use the SETUP-RANDOM button to initialize the system in a configuration that will most likely be chaotic. NUM-OBSTACLES obstacles of random sizes will be placed at random positions.

Use the SETUP-PERIODIC-X button to see an example of the kind of periodic behavior the system can exhibit.

Use the SETUP-PERIODIC-QUILT button to see another example of periodic behavior that has a very long period.

The GO button runs the simulation.

If the TRACE-PATH? switch is on, the paths of the balls will be traced. CLEAR-DRAWING clears the paths.

DRAG can be used to move the balls and obstacles around, as well as change the size of the obstacles and direction of the balls. Once pressed, clicking and dragging near the center of balls and obstacles will move them around. Clicking and dragging near the edge of balls will change their direction. Clicking and dragging near the edge of obstacles will change their size.

## THINGS TO NOTICE

Notice how the bouncing of the balls is fairly predictable until they hit the circle. Why do you think that is?

If you run the model without an obstacle, the behavior is always periodic, though that period might be very long. Why might that be?

If TWO-BALLS? is on, the setup buttons will create an additional ball that will be in almost, but not quite, the same position as the first ball. Running the system with two balls and an obstacle will show how dramatic of an effect slight changes in initial conditions can have in chaotic systems. This is the signature feature of a chaotic system.

It's very unlikely that a random configuration in which the ball collides with an obstacle will be periodic.

## THINGS TO TRY

Try SETUP-PERIODIC-X with TWO-BALLS? on. How do the red and blue balls behave differently?

Try SETUP-PERIODIC-QUILT with TWO-BALLS? on. When do the red and blue balls begin to diverge?

Can you find other configurations that result in periodic behavior?

## EXTENDING THE MODEL

Add obstacles of different shapes. What shapes produce chaotic behavior?

Add a slider to control the number of balls, so that you can have more than two.

Add a slider to control how far the balls start from the red ball. Does making the distance smaller or bigger change the behavior of the model?

Try to change the shape of the box.

Currently, balls do not collide against each other. Can you make it so they do? Can you find a periodic configuration in which the balls collide against each other?

## NETLOGO FEATURES

This model uses a number of advanced techniques:

First, anonymous procedures are used to make the SETUP procedure very flexible with respect to the placement of the balls and obstacles. For example, SETUP-PERIODIC-QUILT uses the following code:

```
setup [-> setxy 0 8 set size 1 ] [-> setxy 0 7 facexy -8 -6 ]
```

The first anonymous procedure configures the obstacle and the second configures the ball.

The FOREACH-AGENT procedure shows how you can use anonymous procedures to create your own control structures in NetLogo. FOREACH-AGENT works like FOREACH, but operates on agentsets instead of lists.

Second, because of the chaotic nature of this system, the collisions between objects must be handled very precisely. Because the balls move by taking steps of size SPEED each tick, the location the ball is in when it hits another object won't be the same as if the ball had been moving continuously. This error can, for instance, make what should be periodic configurations chaotic. To correct for this, the model uses a technique called [binary search](https://en.wikipedia.org/wiki/Binary_search_algorithm) to get very close to the exact location of collision very quickly. While binary search is a general algorithm, not a NetLogo feature, this model shows how you can implement a spatial binary search in NetLogo. In addition, because the ATAN reporter can introduce small imprecisions, this model rounds the heading of the ball after collisions with obstacles to the nearest 100,000th of a degree.

Finally, the code for dragging the obstacles and balls around shows how fairly sophisticated manipulation of agents can be done with the mouse.

## RELATED MODELS

- The GasLab models
- Kicked Rotator is another example of a chaotic system

## CREDITS AND REFERENCES

This model was inspired by a conversation with Dirk Brockmann who discusses this phenomenon in his Complex Systems in Biology course at the Humboldt University of Berlin.

## HOW TO CITE

If you mention this model or the NetLogo software in a publication, we ask that you include the citations below.

For the model itself:

* Head, B. and Wilensky, U. (2017).  NetLogo Chaos in a Box model.  http://ccl.northwestern.edu/netlogo/models/ChaosinaBox.  Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

Please cite the NetLogo software as:

* Wilensky, U. (1999). NetLogo. http://ccl.northwestern.edu/netlogo/. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

## COPYRIGHT AND LICENSE

Copyright 2017 Uri Wilensky.

![CC BY-NC-SA 3.0](http://ccl.northwestern.edu/images/creativecommons/byncsa.png)

This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License.  To view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/3.0/ or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.

Commercial licenses are also available. To inquire about commercial licenses, please contact Uri Wilensky at uri@northwestern.edu.

<!-- 2017 Cite: Head, B. -->]]></info><systemDynamics/><linkShapes><linkShape curviness="0.0" name="default"><line stroke-dasharray="0.0,1.0" isVisible="false" offset="-0.2"/><line stroke-dasharray="1.0,0.0" isVisible="true" offset="0.0"/><line stroke-dasharray="0.0,1.0" isVisible="false" offset="0.2"/><indicator editableColorIndex="0" rotatable="true" name="link direction"><elements><line marked="true" filled="false" color="#8D8D8D" y2="180" x2="90" y1="150" x1="150"/><line marked="true" filled="false" color="#8D8D8D" y2="180" x2="210" y1="150" x1="150"/></elements></indicator></linkShape></linkShapes><widgets><view frameRate="30.0" showTickCounter="true" fontSize="10" bottom="444" right="568" top="10" left="135"><dimensions maxPycor="8" minPycor="-8" maxPxcor="8" minPxcor="-8" wrapInY="false" wrapInX="false" patchSize="25.0"/><tickCounterLabel><![CDATA[ticks]]></tickCounterLabel></view><button ticksEnabled="false" forever="false" bottom="118" right="130" top="85" left="5"><source><![CDATA[setup-random]]></source></button><button ticksEnabled="true" forever="true" bottom="228" right="130" top="195" left="5"><source><![CDATA[go]]></source></button><switch isOn="true" bottom="268" right="130" top="235" left="5"><variable><![CDATA[trace-path?]]></variable></switch><button ticksEnabled="true" forever="false" bottom="303" right="130" top="270" left="5"><source><![CDATA[clear-drawing]]></source></button><button ticksEnabled="false" forever="false" bottom="153" right="130" top="120" left="5"><source><![CDATA[setup-periodic-x]]></source></button><slider direction="horizontal" default="1.0" bottom="43" right="130" top="10" left="5"><maximum><![CDATA[10]]></maximum><minimum><![CDATA[0]]></minimum><step><![CDATA[1]]></step><variable><![CDATA[num-obstacles]]></variable></slider><button ticksEnabled="true" forever="true" bottom="343" right="130" top="310" left="5"><source><![CDATA[drag]]></source></button><button ticksEnabled="false" forever="false" bottom="188" right="130" top="155" left="5"><source><![CDATA[setup-periodic-quilt]]></source></button><switch isOn="false" bottom="78" right="130" top="45" left="5"><variable><![CDATA[two-balls?]]></variable></switch></widgets><experiments/><shapes><turtleShape editableColorIndex="0" rotatable="true" name="default"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,5 40,250 150,205 260,250"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="airplane"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,0 135,15 120,60 120,105 15,165 15,195 120,180 135,240 105,270 120,285 150,270 180,285 210,270 165,240 180,180 285,195 285,165 180,105 180,60 165,15"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="arrow"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,0 0,150 105,150 105,293 195,293 195,150 300,150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="box"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,285 285,225 285,75 150,135"/><polygon marked="true" filled="true" color="#8D8D8D" points="150,135 15,75 150,15 285,75"/><polygon marked="true" filled="true" color="#8D8D8D" points="15,75 15,225 150,285 150,135"/><line marked="false" filled="false" color="#000000" y2="135" x2="150" y1="285" x1="150"/><line marked="false" filled="false" color="#000000" y2="75" x2="15" y1="135" x1="150"/><line marked="false" filled="false" color="#000000" y2="75" x2="285" y1="135" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="bug"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="182" cx="96"/><circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="127" cx="110"/><circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="75" cx="110"/><line marked="true" filled="false" color="#8D8D8D" y2="30" x2="80" y1="100" x1="150"/><line marked="true" filled="false" color="#8D8D8D" y2="30" x2="220" y1="100" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="butterfly"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,165 209,199 225,225 225,255 195,270 165,255 150,240"/><polygon marked="true" filled="true" color="#8D8D8D" points="150,165 89,198 75,225 75,255 105,270 135,255 150,240"/><polygon marked="true" filled="true" color="#8D8D8D" points="139,148 100,105 55,90 25,90 10,105 10,135 25,180 40,195 85,194 139,163"/><polygon marked="true" filled="true" color="#8D8D8D" points="162,150 200,105 245,90 275,90 290,105 290,135 275,180 260,195 215,195 162,165"/><polygon marked="false" filled="true" color="#000000" points="150,255 135,225 120,150 135,120 150,105 165,120 180,150 165,225"/><circle marked="false" filled="true" color="#000000" diameter="30" cy="90" cx="135"/><line marked="false" filled="false" color="#000000" y2="60" x2="195" y1="105" x1="150"/><line marked="false" filled="false" color="#000000" y2="60" x2="105" y1="105" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="car"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="300,180 279,164 261,144 240,135 226,132 213,106 203,84 185,63 159,50 135,50 75,60 0,150 0,165 0,225 300,225 300,180"/><circle marked="false" filled="true" color="#000000" diameter="90" cy="180" cx="180"/><circle marked="false" filled="true" color="#000000" diameter="90" cy="180" cx="30"/><polygon marked="false" filled="true" color="#000000" points="162,80 132,78 134,135 209,135 194,105 189,96 180,89"/><circle marked="true" filled="true" color="#8D8D8D" diameter="58" cy="195" cx="47"/><circle marked="true" filled="true" color="#8D8D8D" diameter="58" cy="195" cx="195"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="circle"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="circle 2"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/><circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/></elements></turtleShape><turtleShape editableColorIndex="15" rotatable="false" name="circle-with-border"><elements><circle marked="false" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/><circle marked="true" filled="true" color="#FFFFFF" diameter="270" cy="15" cx="15"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="circled-default"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="297" cy="2" cx="2"/><polygon marked="false" filled="true" color="#FFFFFF" points="150,5 40,250 150,205 260,250"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="cow"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="200,193 197,249 179,249 177,196 166,187 140,189 93,191 78,179 72,211 49,209 48,181 37,149 25,120 25,89 45,72 103,84 179,75 198,76 252,64 272,81 293,103 285,121 255,121 242,118 224,167"/><polygon marked="true" filled="true" color="#8D8D8D" points="73,210 86,251 62,249 48,208"/><polygon marked="true" filled="true" color="#8D8D8D" points="25,114 16,195 9,204 23,213 25,200 39,123"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="cylinder"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="dot"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="120" cy="90" cx="90"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="face happy"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="8" cx="8"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/><polygon marked="false" filled="true" color="#000000" points="150,255 90,239 62,213 47,191 67,179 90,203 109,218 150,225 192,218 210,203 227,181 251,194 236,217 212,240"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="face neutral"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="7" cx="8"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/><rect marked="false" filled="true" color="#000000" height="30" width="180" y="195" x="60"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="face sad"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="8" cx="8"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/><polygon marked="false" filled="true" color="#000000" points="150,168 90,184 62,210 47,232 67,244 90,220 109,205 150,198 192,205 210,220 227,242 251,229 236,206 212,183"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="fish"><elements><polygon marked="false" filled="true" color="#FFFFFF" points="44,131 21,87 15,86 0,120 15,150 0,180 13,214 20,212 45,166"/><polygon marked="false" filled="true" color="#FFFFFF" points="135,195 119,235 95,218 76,210 46,204 60,165"/><polygon marked="false" filled="true" color="#FFFFFF" points="75,45 83,77 71,103 86,114 166,78 135,60"/><polygon marked="true" filled="true" color="#8D8D8D" points="30,136 151,77 226,81 280,119 292,146 292,160 287,170 270,195 195,210 151,212 30,166"/><circle marked="false" filled="true" color="#000000" diameter="30" cy="106" cx="215"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="flag"><elements><rect marked="true" filled="true" color="#8D8D8D" height="285" width="15" y="15" x="60"/><polygon marked="true" filled="true" color="#8D8D8D" points="90,150 270,90 90,30"/><line marked="true" filled="false" color="#8D8D8D" y2="135" x2="90" y1="135" x1="75"/><line marked="true" filled="false" color="#8D8D8D" y2="45" x2="90" y1="45" x1="75"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="flower"><elements><polygon marked="false" filled="true" color="#59B03C" points="135,120 165,165 180,210 180,240 150,300 165,300 195,240 195,195 165,135"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="132" cx="85"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="147" cx="130"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="85" cx="192"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="40" cx="85"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="40" cx="177"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="132" cx="177"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="85" cx="70"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="25" cx="130"/><circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="51" cx="96"/><circle marked="false" filled="true" color="#000000" diameter="74" cy="68" cx="113"/><polygon marked="false" filled="true" color="#59B03C" points="189,233 219,188 249,173 279,188 234,218"/><polygon marked="false" filled="true" color="#59B03C" points="180,255 150,210 105,210 75,240 135,240"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="house"><elements><rect marked="true" filled="true" color="#8D8D8D" height="165" width="210" y="120" x="45"/><rect marked="false" filled="true" color="#000000" height="75" width="60" y="210" x="120"/><polygon marked="true" filled="true" color="#8D8D8D" points="15,120 150,15 285,120"/><line marked="false" filled="false" color="#000000" y2="120" x2="270" y1="120" x1="30"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="leaf"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,210 135,195 120,210 60,210 30,195 60,180 60,165 15,135 30,120 15,105 40,104 45,90 60,90 90,105 105,120 120,120 105,60 120,60 135,30 150,15 165,30 180,60 195,60 180,120 195,120 210,105 240,90 255,90 263,104 285,105 270,120 285,135 240,165 240,180 270,195 240,210 180,210 165,195"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,195 135,240 120,255 105,255 105,285 135,285 165,240 165,195"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="line"><elements><line marked="true" filled="false" color="#8D8D8D" y2="300" x2="150" y1="0" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="line half"><elements><line marked="true" filled="false" color="#8D8D8D" y2="150" x2="150" y1="0" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="pentagon"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,15 15,120 60,285 240,285 285,120"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="person"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="5" cx="110"/><polygon marked="true" filled="true" color="#8D8D8D" points="105,90 120,195 90,285 105,300 135,300 150,225 165,300 195,300 210,285 180,195 195,90"/><rect marked="true" filled="true" color="#8D8D8D" height="15" width="45" y="79" x="127"/><polygon marked="true" filled="true" color="#8D8D8D" points="195,90 240,150 225,180 165,105"/><polygon marked="true" filled="true" color="#8D8D8D" points="105,90 60,150 75,180 135,105"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="plant"><elements><rect marked="true" filled="true" color="#8D8D8D" height="210" width="30" y="90" x="135"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,255 90,210 45,195 75,255 135,285"/><polygon marked="true" filled="true" color="#8D8D8D" points="165,255 210,210 255,195 225,255 165,285"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,180 90,135 45,120 75,180 135,210"/><polygon marked="true" filled="true" color="#8D8D8D" points="165,180 165,210 225,180 255,120 210,135"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,105 90,60 45,45 75,105 135,135"/><polygon marked="true" filled="true" color="#8D8D8D" points="165,105 165,135 225,105 255,45 210,60"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,90 120,45 150,15 180,45 165,90"/></elements></turtleShape><turtleShape editableColorIndex="15" rotatable="false" name="sheep"><elements><circle marked="true" filled="true" color="#FFFFFF" diameter="88" cy="65" cx="203"/><circle marked="true" filled="true" color="#FFFFFF" diameter="162" cy="65" cx="70"/><circle marked="true" filled="true" color="#FFFFFF" diameter="120" cy="105" cx="150"/><polygon marked="false" filled="true" color="#8D8D8D" points="218,120 240,165 255,165 278,120"/><circle marked="false" filled="true" color="#8D8D8D" diameter="67" cy="72" cx="214"/><rect marked="true" filled="true" color="#FFFFFF" height="75" width="15" y="223" x="164"/><polygon marked="true" filled="true" color="#FFFFFF" points="45,285 30,285 30,240 15,195 45,210"/><circle marked="true" filled="true" color="#FFFFFF" diameter="150" cy="83" cx="3"/><rect marked="true" filled="true" color="#FFFFFF" height="75" width="15" y="221" x="65"/><polygon marked="true" filled="true" color="#FFFFFF" points="195,285 210,285 210,240 240,210 195,210"/><polygon marked="false" filled="true" color="#8D8D8D" points="276,85 285,105 302,99 294,83"/><polygon marked="false" filled="true" color="#8D8D8D" points="219,85 210,105 193,99 201,83"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="square"><elements><rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="square 2"><elements><rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/><rect marked="false" filled="true" color="#000000" height="180" width="180" y="60" x="60"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="star"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="151,1 185,108 298,108 207,175 242,282 151,216 59,282 94,175 3,108 116,108"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="target"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/><circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/><circle marked="true" filled="true" color="#8D8D8D" diameter="180" cy="60" cx="60"/><circle marked="false" filled="true" color="#000000" diameter="120" cy="90" cx="90"/><circle marked="true" filled="true" color="#8D8D8D" diameter="60" cy="120" cx="120"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="tree"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="94" cy="3" cx="118"/><rect marked="false" filled="true" color="#9D6E48" height="105" width="60" y="195" x="120"/><circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="21" cx="65"/><circle marked="true" filled="true" color="#8D8D8D" diameter="127" cy="41" cx="116"/><circle marked="true" filled="true" color="#8D8D8D" diameter="120" cy="90" cx="45"/><circle marked="true" filled="true" color="#8D8D8D" diameter="152" cy="74" cx="104"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="triangle"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,30 15,255 285,255"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="triangle 2"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,30 15,255 285,255"/><polygon marked="false" filled="true" color="#000000" points="151,99 225,223 75,224"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="truck"><elements><rect marked="true" filled="true" color="#8D8D8D" height="142" width="191" y="45" x="4"/><polygon marked="true" filled="true" color="#8D8D8D" points="296,193 296,150 259,134 244,104 208,104 207,194"/><rect marked="false" filled="true" color="#FFFFFF" height="45" width="0" y="60" x="195"/><polygon marked="false" filled="true" color="#000000" points="238,112 252,141 219,141 218,112"/><circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="234"/><rect marked="true" filled="true" color="#8D8D8D" height="9" width="33" y="185" x="181"/><circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="144"/><circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="24"/><circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="24"/><circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="144"/><circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="234"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="turtle"><elements><polygon marked="false" filled="true" color="#59B03C" points="215,204 240,233 246,254 228,266 215,252 193,210"/><polygon marked="false" filled="true" color="#59B03C" points="195,90 225,75 245,75 260,89 269,108 261,124 240,105 225,105 210,105"/><polygon marked="false" filled="true" color="#59B03C" points="105,90 75,75 55,75 40,89 31,108 39,124 60,105 75,105 90,105"/><polygon marked="false" filled="true" color="#59B03C" points="132,85 134,64 107,51 108,17 150,2 192,18 192,52 169,65 172,87"/><polygon marked="false" filled="true" color="#59B03C" points="85,204 60,233 54,254 72,266 85,252 107,210"/><polygon marked="true" filled="true" color="#8D8D8D" points="119,75 179,75 209,101 224,135 220,225 175,261 128,261 81,224 74,135 88,99"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="wheel"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="294" cy="3" cx="3"/><circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/><line marked="true" filled="false" color="#8D8D8D" y2="15" x2="150" y1="285" x1="150"/><line marked="true" filled="false" color="#8D8D8D" y2="150" x2="285" y1="150" x1="15"/><circle marked="true" filled="true" color="#8D8D8D" diameter="60" cy="120" cx="120"/><line marked="true" filled="false" color="#8D8D8D" y2="269" x2="79" y1="40" x1="216"/><line marked="true" filled="false" color="#8D8D8D" y2="221" x2="269" y1="84" x1="40"/><line marked="true" filled="false" color="#8D8D8D" y2="79" x2="269" y1="216" x1="40"/><line marked="true" filled="false" color="#8D8D8D" y2="269" x2="221" y1="40" x1="84"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="wolf"><elements><polygon marked="false" filled="true" color="#000000" points="253,133 245,131 245,133"/><polygon marked="true" filled="true" color="#8D8D8D" points="2,194 13,197 30,191 38,193 38,205 20,226 20,257 27,265 38,266 40,260 31,253 31,230 60,206 68,198 75,209 66,228 65,243 82,261 84,268 100,267 103,261 77,239 79,231 100,207 98,196 119,201 143,202 160,195 166,210 172,213 173,238 167,251 160,248 154,265 169,264 178,247 186,240 198,260 200,271 217,271 219,262 207,258 195,230 192,198 210,184 227,164 242,144 259,145 284,151 277,141 293,140 299,134 297,127 273,119 270,105"/><polygon marked="true" filled="true" color="#8D8D8D" points="-1,195 14,180 36,166 40,153 53,140 82,131 134,133 159,126 188,115 227,108 236,102 238,98 268,86 269,92 281,87 269,103 269,113"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="x"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="270,75 225,30 30,225 75,270"/><polygon marked="true" filled="true" color="#8D8D8D" points="30,75 75,30 270,225 225,270"/></elements></turtleShape></shapes><code><![CDATA[globals [
  collision-precision ; Determines how accurate the location of collisions will be

  ; Determines how much we round the angles when bouncing off the obstacle.
  ; This is necessary, because small errors in angle should be ignored.
  angle-precision

  speed ; All balls have the same speed

  ; We don't want to change `heading` until all collisions have been
  ; factored in. This is because the ball's `heading` affects the
  ; adjustments made to the ball's position to find the exact spot
  ; a collision took place. See `correct-collision-position`.
  ; So, the ball's heading after collision is stored in NEW-HEADING
  ; until after all collisions have been taken into account.
  new-heading

  ; These are used to track which agent is being dragged and what part of that agent
  ; is being dragged.
  target-agent
  set-target-attribute
  get-target-attribute
  target-attribute-value
]

breed [ obstacles obstacle ]
breed [ balls ball ]

; General setup procedure
; It takes two anonymous procedures: the first configures obstacles, the second configures the ball.
; See SETUP-RANDOM, SETUP-PERIODIC-X, and SETUP-PERIODIC-QUILT for examples.
to setup [ obstacle-placement ball-placement ]
  clear-all

  set-default-shape obstacles "circle-with-border"

  ; Create obstacle so that it's completely inside the world
  create-obstacles num-obstacles [
    set color grey - 3
    ; First, set the size of the obstacle so that it fits in the world and doesn't take up all the space
    set size max list 1 random-float (0.75 * min list world-width world-height)
    run obstacle-placement ; run the anonymous procedure to place the obstacle
  ]

  set-default-shape balls "circled-default"
  create-balls 1 [
    set color red
    run ball-placement ; run the anonymous procedure to place the ball
    if two-balls? [
      hatch 1 [
        set heading random 360
        fd 0.05
        set heading [ heading ] of myself
        set color blue
      ]
    ]
  ]

  set collision-precision 64 ; Collisions will be within speed / (2 ^ 64) of the correct position
  set angle-precision 1000 ; Round to 1000th of a degree
  set speed 0.05

  reset-dragging

  reset-ticks
end

to setup-random
  setup [->
    ; Place obstacles randomly so that they're completely inside the world
    place-randomly-inside-walls
  ] [->
    ; Place the ball in the walls and then makes sure it's not overlapping with any obstacles.
    place-randomly-inside-walls
    while [ any? obstacles with [ overlap myself > 0 ] ] [  ; keep placing, checking for overlap, until there is none
      place-randomly-inside-walls
    ]
  ]
end

to setup-periodic-x
  set num-obstacles 1
  setup [-> setxy 0 0 set size 3 ] [-> setxy 6 8 facexy 0 2 ]
end

to setup-periodic-quilt
  set num-obstacles 1
  setup [-> setxy 0 8 set size 1 ] [-> setxy 0 7 facexy -8 -6 ]
end

to go
  repeat 5 [
    ask balls [
      set pen-mode ifelse-value trace-path? [ "down" ] [ "up" ]
      fd speed

      set new-heading heading

      if colliding-with-floor-or-ceiling? [
        correct-collision-position [-> colliding-with-floor-or-ceiling?]
        set new-heading 180 - new-heading
      ]

      if colliding-with-walls? [
        correct-collision-position [-> colliding-with-walls?]
        set new-heading 360 - new-heading
      ]

      foreach-agent obstacles [ an-obstacle ->
        if colliding-with? an-obstacle [
          bounce-off an-obstacle
        ]
      ]

      set heading new-heading
      pen-up
    ]
  ]
  tick
end

; A custom control structure that works like FOREACH, but operates
; on agentsets instead of lists.
to foreach-agent [ agentset command ]
  foreach [ self ] of agentset [ agent ->
    (run command agent)
  ]
end

; Turtle procedure
; Because the balls travel in steps of size `speed`, they won't detect
; a collision at the right location. This corrects that by moving the
; ball back and forth by ever smaller amounts to get as close as possible
; to the exact position of collision. This technique is called a
; "binary search".
to correct-collision-position [ colliding? ]
  refine-collision-position colliding? speed collision-precision
end

; This is helper procedure for `correct-collision-position`.
to refine-collision-position [ colliding? dist n ]
  ifelse runresult colliding? [
    bk dist
  ][
    fd dist
  ]
  if n > 0 [
    refine-collision-position colliding? (dist / 2) (n - 1)
  ]
end

; Ball procedures
; These do collision detection. They ensure that the ball is facing the
; object being collided with, otherwise you can get into weird situations
; when the ball is very close or colliding with two objects.

to-report colliding-with-floor-or-ceiling?
  report (dy > 0 and ycor > max-pycor) or (dy < 0 and ycor < min-pycor)
end

to-report colliding-with-walls?
  report (dx > 0 and xcor > max-pxcor) or (dx < 0 and xcor < min-pxcor)
end

to-report colliding-with? [ agent ]
  ; Gets the ball's heading as an angle between -180 and 180.
  ; We only consider the ball to be colliding with an obstacle if it's
  ; generally facing that obstacle.
  let h abs ((heading - towards agent + 180) mod 360 - 180)
  report h < 90 and overlap agent > 0
end

; Modifies the ball's NEW-HEADING in reaction to bouncing off the
; given obstacle.
to bounce-off [ an-obstacle ]
  correct-collision-position [-> colliding-with? an-obstacle ]

  ; We can't just use `dx` and `dy` here as we want to base these
  ; on `new-heading` rather than `heading`.
  let d-x sin new-heading
  let d-y cos new-heading

  ; These are the components of the vector pointing from the
  ; obstacle to the ball.
  let rx xcor - [ xcor ] of an-obstacle
  let ry ycor - [ ycor ] of an-obstacle

  ; This code reflects the vector of the ball's new heading around
  ; the vector pointing from the obstacle to the ball.
  let v-dot-r rx * dx + ry * dy
  let new-dx d-x - 2 * v-dot-r * rx / (rx * rx + ry * ry)
  let new-dy d-y - 2 * v-dot-r * ry / (rx * rx + ry * ry)

  set new-heading round-to (atan new-dx new-dy) angle-precision
end

; Ball or obstacle procedure
to-report overlap [ agent ]
  report (size + [size] of agent) / 2 - distance agent
end

; Ball or obstacle procedure
; Positions the agent randomly in the world such that
to place-randomly-inside-walls
  set xcor min-pxcor - 0.5 + size / 2 + random-float (world-width - size)
  set ycor min-pycor - 0.5 + size / 2 + random-float (world-height - size)
end

to-report round-to [ x p ]
  report round (x * p) / p
end

; Observer procedure
; This handles all the dragging code. The logic flow is as follows:
; If nothing is selected, and pick the closest agent. If the mouse is close to
; the center of the agent, prepare to set the agent's position. If the mouse is
; close to the edge of the agent, prepare to set a different attribute (size in
; the case of obstacles and direction in the case of balls).
; If something is already selected, set the selected attribute.
to drag
  ifelse mouse-down? [
    ifelse target-agent = nobody [
      ask min-one-of turtles [ min list (distancexy mouse-xcor mouse-ycor) (distancexy-to-edge mouse-xcor mouse-ycor) ] [
        let edge-dist distancexy-to-edge mouse-xcor mouse-ycor
        let center-dist distancexy mouse-xcor mouse-ycor
        if edge-dist < 1 or center-dist < size / 2 [
          set target-agent self
          ifelse center-dist < edge-dist or edge-dist > 1 [
            set set-target-attribute [[x y] ->
              ; There's a chance of x and y being outside of the world bounds.
              ; We just ignore the error if that's the case.
              carefully [ setxy x y ] []
            ]
            set get-target-attribute [[x y] -> (word "Position: " xcor ", " ycor)]
          ][
            ifelse breed = balls [
              set set-target-attribute [[x y] -> set heading towardsxy x y]
              set get-target-attribute [[x y] -> (word "Facing: " x ", " y)]
            ] [
              set set-target-attribute [[x y] -> set size round-to (2 * (distancexy mouse-xcor mouse-ycor)) 10]
              set get-target-attribute [[x y] -> (word "Size: " size) ]
            ]
          ]
        ]
      ]
    ][
      if mouse-inside? [
        ask target-agent [
          (run set-target-attribute (round-to mouse-xcor 10) (round-to mouse-ycor 10))
          set label (runresult get-target-attribute (round-to mouse-xcor 10) (round-to mouse-ycor 10))
          set target-attribute-value label
        ]
        display
      ]
    ]
  ][
    reset-dragging
  ]
end

to-report distancexy-to-edge [ x y ]
  report abs (size / 2 - distancexy x y)
end

to reset-dragging
  if is-turtle? target-agent [
    ask target-agent [
      set label ""
    ]
  ]
  set target-agent nobody
  set set-target-attribute [ -> ]
  set get-target-attribute [ -> 0 ]
  set target-attribute-value ""
end

; Additional periodic configurations

to setup-two-walls
  set num-obstacles 1
  setup [-> setxy 0 0 set size 3 ] [->  setxy 8 8 facexy 0 0]
end

to setup-corner-obstacle
  set num-obstacles 1
  setup [-> setxy -8.5 -8.5 set size 0.4] [-> setxy 8 8 facexy 0 0]
end

to setup-two-corners
  set num-obstacles 1
  setup [-> setxy 0 0 set size 8] [-> setxy 8 8 facexy 0 (0.5 + [ size / 2 ] of one-of obstacles)]
end

to setup-two-obstacles
  set num-obstacles 2
  setup [-> set size 1] [-> setxy 8 8 facexy 0 0]
  ask obstacle 0 [ setxy -.1 0 ]
  ask obstacle 1 [ setxy 0 -.1 ]
end

to setup-wall-obstacle
  set num-obstacles 3
  setup [-> set size 1 setxy -8 -8] [-> setxy 1 0 facexy -7 -8]
  ask obstacle 1 [ setxy 2 0 ]
  ask obstacle 2 [ setxy -8 8 ]
end

; Currently failing because it uses angles that don't round evenly.
to setup-triangle
  set num-obstacles 1
  setup [-> setxy 0 8 set size 1 ] [-> setxy 0 7 facexy -8 -8]
end

to setup-simple-triangle
  set num-obstacles 1
  setup [-> setxy 0 1 set size 1 ] [-> setxy 0 0 facexy -8 -8]
end


; Copyright 2017 Uri Wilensky.
; See Info tab for full copyright and license.]]></code><modelSettings snapToGrid="true"/><hubnet/></model>
