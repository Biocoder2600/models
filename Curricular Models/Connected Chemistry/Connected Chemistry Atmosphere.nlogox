<?xml version='1.0' encoding='UTF-8'?>
<model xmlns="http://ccl.northwestern.edu/netlogo/6.1"><version><![CDATA[NetLogo 6.0.2]]></version><previewCommands><compiled><![CDATA[setup repeat 75 [ go ]]]></compiled></previewCommands><info><![CDATA[## WHAT IS IT?

In this model, a gaseous atmosphere is placed above the surface of a "planet". The model explores the behavior of gas molecules that have an external force acting on them (gravity), and therefore are no longer considered an ideal gas.  This is the eighth in a sequence of models from the "Connected Chemistry" curriculum, exploring the behavior of gases. The Connected Chemistry curriculum was initially developed as part of the Modeling Across the Curriculum (MAC) Project: http://ccl.northwestern.edu/curriculum/mac/.

## HOW IT WORKS

The basic principle of all GasLab models is the following algorithm (for more details, see the model "GasLab Gas in a Box"):

1) A particle moves in a straight line without changing its speed, unless it collides with another particle or bounces off the wall.
2) Two particles "collide" if they find themselves on the same patch (the NetLogo world is composed of a grid of small squares called patches).
3) An angle of collision for the particles is chosen, as if they were two solid balls that hit, and this angle describes the direction of the line connecting their centers.
4) The particles exchange momentum and energy only along this line, conforming to the conservation of momentum and energy for elastic collisions.
5) Each particle is assigned its new speed, heading and energy.
6) If a particle is on or very close to the surface of the planet (the yellow line at the bottom), it "bounces" -- that is, reflects its direction and keeps its same speed.

In this model, the effect of gravity is calculated as follows: every particle is given additional velocity downward during each clock tick, as it would get in a gravitational field. The particles bounce off the "ground". They disappear if they reach the top of the world, as if they had escaped the planet's gravitational field. The percentage of lost particles is shown in the PERCENT LOST PARTICLES monitor.

## HOW TO USE IT

Initial settings:
- NUMBER-OF-PARTICLES: number of gas particles
- INIT-PARTICLE-SPEED: initial speed of each particle

## BUTTONS:

The SETUP button will set the initial conditions.  The GO button will run the simulation.
- INCREASE-GRAVITY: incrementally increases value of the gravitational acceleration
- DECREASE-GRAVITY: incrementally increases value of the gravitational acceleration
- CLEAR TRACE: removes the traces of the particle paths.

Other settings:
- COLLIDE?: Turns collisions between particles on and off.
- TRACE?: Traces the path of one of the particles.

Monitors:
- AVERAGE SPEED: average speed of the particles.
- ACCELERATION FROM GRAVITY: acceleration from the force of gravity on each particle.
- PERCENT LOST PARTICLES: percentage of particles that have disappeared off the top of the world.

Choosers:
SPEED-AS-COLOR? allows you to visualize particle speed using a color palette.
- The "blue-green-red" setting shows the lower half of the speeds of the starting population as blue, and the upper half as red.
- The "violet shades" setting shows a gradient from dark violet (slow) to light violet (fast).
- The "all green" setting shows all particles in green, regardless of speed.
- The "custom color" setting, referenced in the Pedagogica version of this model, allows the user to modify the color of one or more particles, without having to worry that the particles will be recolored with each tick of the clock (as is the case for the other color options).

## THINGS TO NOTICE

Try to predict what the model view will look like after a while, and why.

Watch the path of one particle. What can you say about its motion? Turn COLLIDE? off and see if there are any differences.

Watch the change in density distribution as the model runs.

The atmosphere up high is thinner than down low.  Why?

Is the temperature of the lower atmosphere the same as the upper atmosphere?

## THINGS TO TRY

What happens when gravity is increased or decreased?

Change the initial number, speed and mass.  What happens to the density distribution?

What factors affect how many particles escape this planet?

Does this model come to some sort of equilibrium?  How can you tell when it has been reached?

Try and find out if the distribution of the particles in this model is the same as what is predicted by conventional physical laws. Is this consistent, for instance, with the fact that high-altitude places have lower pressure (and thus lower density of air)? Why are they colder?

Try making gravity negative.

## EXTENDING THE MODEL

Find a way to plot the relative "temperature" of the gas as a function of distance from the planet.

Try this model with particles of different masses.  You could color each mass differently to be able to see where they go.  Are their distributions different?  Which ones escape most easily?  What does this suggest about the composition of an atmosphere?

The fact that particles escape when they reach a certain height isn't completely realistic, especially in the case when the particle was about to turn back towards the planet.  Improve the model by allowing particles that have "escaped" to re-enter the atmosphere once gravity pulls them back down.  How does this change the behavior of the model?  Keeping track of actual losses (particles which reached the escape velocity of the planet) would be interesting.  Under what conditions will particles reach escape velocity at all?

Make the "planet" into a central point instead of a flat plane.

This basic model could be used to explore other situations where freely moving particles have forces on them -- e.g., a centrifuge or charged particles (ions) in an electrical field.

## NETLOGO FEATURES

Because of the influence of gravity, the particles follow curved paths.  Since NetLogo models time in discrete steps, these curved paths must be approximated with a series of short straight lines.  This is the source of a slight inaccuracy where the particles gradually lose energy if the model runs for a long time.  The effect is as though the collisions with the ground were slightly inelastic.  Increasing the variable "vsplit" can reduce the inaccuracy, but the model will run slower.

## RELATED MODELS

This model is modified from those in the GasLab suite and curriculum.
See, in particular, the models "Gas in a Box" and "Gravity Box", which is a modified version of the "Atmosphere" model, with a ceiling on the atmosphere.

See other Connected Chemistry models.

## CREDITS AND REFERENCES

This model is part of the Connected Chemistry curriculum.  See http://ccl.northwestern.edu/curriculum/chemistry/.

We would like to thank Sharona Levy and Michael Novak for their substantial contributions to this model.

## HOW TO CITE

If you mention this model or the NetLogo software in a publication, we ask that you include the citations below.

For the model itself:

* Wilensky, U. (2006).  NetLogo Connected Chemistry Atmosphere model.  http://ccl.northwestern.edu/netlogo/models/ConnectedChemistryAtmosphere.  Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

Please cite the NetLogo software as:

* Wilensky, U. (1999). NetLogo. http://ccl.northwestern.edu/netlogo/. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

To cite the Connected Chemistry curriculum as a whole, please use:

* Wilensky, U., Levy, S. T., & Novak, M. (2004). Connected Chemistry curriculum. http://ccl.northwestern.edu/curriculum/chemistry/. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

## COPYRIGHT AND LICENSE

Copyright 2006 Uri Wilensky.

![CC BY-NC-SA 3.0](http://ccl.northwestern.edu/images/creativecommons/byncsa.png)

This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License.  To view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/3.0/ or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.

Commercial licenses are also available. To inquire about commercial licenses, please contact Uri Wilensky at uri@northwestern.edu.

<!-- 2006 ConChem -->]]></info><systemDynamics/><linkShapes><linkShape curviness="0.0" name="default"><line stroke-dasharray="0.0,1.0" isVisible="false" offset="-0.2"/><line stroke-dasharray="1.0,0.0" isVisible="true" offset="0.0"/><line stroke-dasharray="0.0,1.0" isVisible="false" offset="0.2"/><indicator editableColorIndex="0" rotatable="true" name="link direction"><elements><line marked="true" filled="false" color="#8D8D8D" y2="180" x2="90" y1="150" x1="150"/><line marked="true" filled="false" color="#8D8D8D" y2="180" x2="210" y1="150" x1="150"/></elements></indicator></linkShape></linkShapes><widgets><view frameRate="120.0" showTickCounter="true" fontSize="10" bottom="295" right="621" top="10" left="337"><dimensions maxPycor="34" minPycor="-34" maxPxcor="34" minPxcor="-34" wrapInY="true" wrapInX="true" patchSize="4.0"/><tickCounterLabel><![CDATA[ticks]]></tickCounterLabel></view><button ticksEnabled="true" forever="true" bottom="78" right="93" top="45" left="7"><source><![CDATA[go]]></source><display><![CDATA[go/stop]]></display></button><button ticksEnabled="false" forever="false" bottom="43" right="93" top="10" left="7"><source><![CDATA[setup]]></source></button><slider direction="horizontal" default="400.0" bottom="43" right="327" top="10" left="96"><maximum><![CDATA[400]]></maximum><minimum><![CDATA[1]]></minimum><step><![CDATA[1]]></step><variable><![CDATA[number-of-particles]]></variable></slider><monitor precision="2" fontSize="11" bottom="247" right="115" top="202" left="12"><source><![CDATA[avg-speed]]></source><display><![CDATA[average speed]]></display></monitor><switch isOn="true" bottom="78" right="186" top="45" left="95"><variable><![CDATA[collide?]]></variable></switch><slider direction="horizontal" default="20.0" bottom="78" right="327" top="45" left="187"><maximum><![CDATA[20]]></maximum><minimum><![CDATA[1]]></minimum><step><![CDATA[1]]></step><variable><![CDATA[init-particle-speed]]></variable></slider><switch isOn="false" bottom="113" right="186" top="80" left="95"><variable><![CDATA[trace?]]></variable></switch><monitor precision="1" fontSize="11" bottom="247" right="264" top="202" left="133"><source><![CDATA[percent-lost-particles]]></source><display><![CDATA[percent lost particles]]></display></monitor><button ticksEnabled="true" forever="false" bottom="113" right="93" top="80" left="7"><source><![CDATA[clear-drawing]]></source><display><![CDATA[clear trace]]></display></button><chooser currentChoice="1" bottom="125" right="327" top="80" left="187"><variable><![CDATA[speed-as-color?]]></variable><choices><stringChoice><![CDATA[red-green-blue]]></stringChoice><stringChoice><![CDATA[purple shades]]></stringChoice><stringChoice><![CDATA[one color]]></stringChoice><stringChoice><![CDATA[custom color]]></stringChoice></choices></chooser><button ticksEnabled="false" forever="false" bottom="154" right="110" top="121" left="7"><source><![CDATA[increase-gravity]]></source></button><button ticksEnabled="false" forever="false" bottom="189" right="109" top="156" left="8"><source><![CDATA[decrease-gravity]]></source><display><![CDATA[decrease-gravity]]></display></button><monitor precision="3" fontSize="11" bottom="176" right="267" top="131" left="115"><source><![CDATA[ gravity-acceleration]]></source><display><![CDATA[acceleration from gravity]]></display></monitor></widgets><experiments/><shapes><turtleShape editableColorIndex="0" rotatable="true" name="default"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,5 40,250 150,205 260,250"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="airplane"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,0 135,15 120,60 120,105 15,165 15,195 120,180 135,240 105,270 120,285 150,270 180,285 210,270 165,240 180,180 285,195 285,165 180,105 180,60 165,15"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="arrow"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,0 0,150 105,150 105,293 195,293 195,150 300,150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="box"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,285 285,225 285,75 150,135"/><polygon marked="true" filled="true" color="#8D8D8D" points="150,135 15,75 150,15 285,75"/><polygon marked="true" filled="true" color="#8D8D8D" points="15,75 15,225 150,285 150,135"/><line marked="false" filled="false" color="#000000" y2="135" x2="150" y1="285" x1="150"/><line marked="false" filled="false" color="#000000" y2="75" x2="15" y1="135" x1="150"/><line marked="false" filled="false" color="#000000" y2="75" x2="285" y1="135" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="bug"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="182" cx="96"/><circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="127" cx="110"/><circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="75" cx="110"/><line marked="true" filled="false" color="#8D8D8D" y2="30" x2="80" y1="100" x1="150"/><line marked="true" filled="false" color="#8D8D8D" y2="30" x2="220" y1="100" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="butterfly"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,165 209,199 225,225 225,255 195,270 165,255 150,240"/><polygon marked="true" filled="true" color="#8D8D8D" points="150,165 89,198 75,225 75,255 105,270 135,255 150,240"/><polygon marked="true" filled="true" color="#8D8D8D" points="139,148 100,105 55,90 25,90 10,105 10,135 25,180 40,195 85,194 139,163"/><polygon marked="true" filled="true" color="#8D8D8D" points="162,150 200,105 245,90 275,90 290,105 290,135 275,180 260,195 215,195 162,165"/><polygon marked="false" filled="true" color="#000000" points="150,255 135,225 120,150 135,120 150,105 165,120 180,150 165,225"/><circle marked="false" filled="true" color="#000000" diameter="30" cy="90" cx="135"/><line marked="false" filled="false" color="#000000" y2="60" x2="195" y1="105" x1="150"/><line marked="false" filled="false" color="#000000" y2="60" x2="105" y1="105" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="car"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="300,180 279,164 261,144 240,135 226,132 213,106 203,84 185,63 159,50 135,50 75,60 0,150 0,165 0,225 300,225 300,180"/><circle marked="false" filled="true" color="#000000" diameter="90" cy="180" cx="180"/><circle marked="false" filled="true" color="#000000" diameter="90" cy="180" cx="30"/><polygon marked="false" filled="true" color="#000000" points="162,80 132,78 134,135 209,135 194,105 189,96 180,89"/><circle marked="true" filled="true" color="#8D8D8D" diameter="58" cy="195" cx="47"/><circle marked="true" filled="true" color="#8D8D8D" diameter="58" cy="195" cx="195"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="circle"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="240" cy="30" cx="30"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="circle 2"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/><circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="clock"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="240" cy="30" cx="30"/><polygon marked="false" filled="true" color="#000000" points="150,31 128,75 143,75 143,150 158,150 158,75 173,75"/><circle marked="false" filled="true" color="#000000" diameter="30" cy="135" cx="135"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="cow"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="200,193 197,249 179,249 177,196 166,187 140,189 93,191 78,179 72,211 49,209 48,181 37,149 25,120 25,89 45,72 103,84 179,75 198,76 252,64 272,81 293,103 285,121 255,121 242,118 224,167"/><polygon marked="true" filled="true" color="#8D8D8D" points="73,210 86,251 62,249 48,208"/><polygon marked="true" filled="true" color="#8D8D8D" points="25,114 16,195 9,204 23,213 25,200 39,123"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="face happy"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="8" cx="8"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/><polygon marked="false" filled="true" color="#000000" points="150,255 90,239 62,213 47,191 67,179 90,203 109,218 150,225 192,218 210,203 227,181 251,194 236,217 212,240"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="face neutral"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="7" cx="8"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/><rect marked="false" filled="true" color="#000000" height="30" width="180" y="195" x="60"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="face sad"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="8" cx="8"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/><polygon marked="false" filled="true" color="#000000" points="150,168 90,184 62,210 47,232 67,244 90,220 109,205 150,198 192,205 210,220 227,242 251,229 236,206 212,183"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="fish"><elements><polygon marked="false" filled="true" color="#FFFFFF" points="44,131 21,87 15,86 0,120 15,150 0,180 13,214 20,212 45,166"/><polygon marked="false" filled="true" color="#FFFFFF" points="135,195 119,235 95,218 76,210 46,204 60,165"/><polygon marked="false" filled="true" color="#FFFFFF" points="75,45 83,77 71,103 86,114 166,78 135,60"/><polygon marked="true" filled="true" color="#8D8D8D" points="30,136 151,77 226,81 280,119 292,146 292,160 287,170 270,195 195,210 151,212 30,166"/><circle marked="false" filled="true" color="#000000" diameter="30" cy="106" cx="215"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="flag"><elements><rect marked="true" filled="true" color="#8D8D8D" height="285" width="15" y="15" x="60"/><polygon marked="true" filled="true" color="#8D8D8D" points="90,150 270,90 90,30"/><line marked="true" filled="false" color="#8D8D8D" y2="135" x2="90" y1="135" x1="75"/><line marked="true" filled="false" color="#8D8D8D" y2="45" x2="90" y1="45" x1="75"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="flower"><elements><polygon marked="false" filled="true" color="#4DAF4A" points="135,120 165,165 180,210 180,240 150,300 165,300 195,240 195,195 165,135"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="132" cx="85"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="147" cx="130"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="85" cx="192"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="40" cx="85"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="40" cx="177"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="132" cx="177"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="85" cx="70"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="25" cx="130"/><circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="51" cx="96"/><circle marked="false" filled="true" color="#000000" diameter="74" cy="68" cx="113"/><polygon marked="false" filled="true" color="#4DAF4A" points="189,233 219,188 249,173 279,188 234,218"/><polygon marked="false" filled="true" color="#4DAF4A" points="180,255 150,210 105,210 75,240 135,240"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="house"><elements><rect marked="true" filled="true" color="#8D8D8D" height="165" width="210" y="120" x="45"/><rect marked="false" filled="true" color="#000000" height="75" width="60" y="210" x="120"/><polygon marked="true" filled="true" color="#8D8D8D" points="15,120 150,15 285,120"/><line marked="false" filled="false" color="#000000" y2="120" x2="270" y1="120" x1="30"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="leaf"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,210 135,195 120,210 60,210 30,195 60,180 60,165 15,135 30,120 15,105 40,104 45,90 60,90 90,105 105,120 120,120 105,60 120,60 135,30 150,15 165,30 180,60 195,60 180,120 195,120 210,105 240,90 255,90 263,104 285,105 270,120 285,135 240,165 240,180 270,195 240,210 180,210 165,195"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,195 135,240 120,255 105,255 105,285 135,285 165,240 165,195"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="line"><elements><line marked="true" filled="false" color="#8D8D8D" y2="300" x2="150" y1="0" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="nothing"><elements/></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="pentagon"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,15 15,120 60,285 240,285 285,120"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="person"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="5" cx="110"/><polygon marked="true" filled="true" color="#8D8D8D" points="105,90 120,195 90,285 105,300 135,300 150,225 165,300 195,300 210,285 180,195 195,90"/><rect marked="true" filled="true" color="#8D8D8D" height="15" width="45" y="79" x="127"/><polygon marked="true" filled="true" color="#8D8D8D" points="195,90 240,150 225,180 165,105"/><polygon marked="true" filled="true" color="#8D8D8D" points="105,90 60,150 75,180 135,105"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="plant"><elements><rect marked="true" filled="true" color="#8D8D8D" height="210" width="30" y="90" x="135"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,255 90,210 45,195 75,255 135,285"/><polygon marked="true" filled="true" color="#8D8D8D" points="165,255 210,210 255,195 225,255 165,285"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,180 90,135 45,120 75,180 135,210"/><polygon marked="true" filled="true" color="#8D8D8D" points="165,180 165,210 225,180 255,120 210,135"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,105 90,60 45,45 75,105 135,135"/><polygon marked="true" filled="true" color="#8D8D8D" points="165,105 165,135 225,105 255,45 210,60"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,90 120,45 150,15 180,45 165,90"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="square"><elements><rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="square 2"><elements><rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/><rect marked="false" filled="true" color="#000000" height="180" width="180" y="60" x="60"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="star"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="151,1 185,108 298,108 207,175 242,282 151,216 59,282 94,175 3,108 116,108"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="target"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/><circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/><circle marked="true" filled="true" color="#8D8D8D" diameter="180" cy="60" cx="60"/><circle marked="false" filled="true" color="#000000" diameter="120" cy="90" cx="90"/><circle marked="true" filled="true" color="#8D8D8D" diameter="60" cy="120" cx="120"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="tree"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="94" cy="3" cx="118"/><rect marked="false" filled="true" color="#9D6E48" height="105" width="60" y="195" x="120"/><circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="21" cx="65"/><circle marked="true" filled="true" color="#8D8D8D" diameter="127" cy="41" cx="116"/><circle marked="true" filled="true" color="#8D8D8D" diameter="120" cy="90" cx="45"/><circle marked="true" filled="true" color="#8D8D8D" diameter="152" cy="74" cx="104"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="triangle"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,30 15,255 285,255"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="triangle 2"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,30 15,255 285,255"/><polygon marked="false" filled="true" color="#000000" points="151,99 225,223 75,224"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="truck"><elements><rect marked="true" filled="true" color="#8D8D8D" height="142" width="191" y="45" x="4"/><polygon marked="true" filled="true" color="#8D8D8D" points="296,193 296,150 259,134 244,104 208,104 207,194"/><rect marked="false" filled="true" color="#FFFFFF" height="45" width="0" y="60" x="195"/><polygon marked="false" filled="true" color="#000000" points="238,112 252,141 219,141 218,112"/><circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="234"/><rect marked="true" filled="true" color="#8D8D8D" height="9" width="33" y="185" x="181"/><circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="144"/><circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="24"/><circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="24"/><circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="144"/><circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="234"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="turtle"><elements><polygon marked="false" filled="true" color="#4DAF4A" points="215,204 240,233 246,254 228,266 215,252 193,210"/><polygon marked="false" filled="true" color="#4DAF4A" points="195,90 225,75 245,75 260,89 269,108 261,124 240,105 225,105 210,105"/><polygon marked="false" filled="true" color="#4DAF4A" points="105,90 75,75 55,75 40,89 31,108 39,124 60,105 75,105 90,105"/><polygon marked="false" filled="true" color="#4DAF4A" points="132,85 134,64 107,51 108,17 150,2 192,18 192,52 169,65 172,87"/><polygon marked="false" filled="true" color="#4DAF4A" points="85,204 60,233 54,254 72,266 85,252 107,210"/><polygon marked="true" filled="true" color="#8D8D8D" points="119,75 179,75 209,101 224,135 220,225 175,261 128,261 81,224 74,135 88,99"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="wheel"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="294" cy="3" cx="3"/><circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/><line marked="true" filled="false" color="#8D8D8D" y2="15" x2="150" y1="285" x1="150"/><line marked="true" filled="false" color="#8D8D8D" y2="150" x2="285" y1="150" x1="15"/><circle marked="true" filled="true" color="#8D8D8D" diameter="60" cy="120" cx="120"/><line marked="true" filled="false" color="#8D8D8D" y2="269" x2="79" y1="40" x1="216"/><line marked="true" filled="false" color="#8D8D8D" y2="221" x2="269" y1="84" x1="40"/><line marked="true" filled="false" color="#8D8D8D" y2="79" x2="269" y1="216" x1="40"/><line marked="true" filled="false" color="#8D8D8D" y2="269" x2="221" y1="40" x1="84"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="x"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="270,75 225,30 30,225 75,270"/><polygon marked="true" filled="true" color="#8D8D8D" points="30,75 75,30 270,225 225,270"/></elements></turtleShape></shapes><code><![CDATA[globals
[
  tick-advance-amount                         ;; the amount by which we will advance ticks
  max-tick-advance-amount                     ;; the largest a tick length is allowed to be
  box-edge                            ;; distance of box edge from axes
  avg-speed-init avg-energy-init      ;; initial averages
  avg-speed avg-energy                ;; current averages
  gravity-acceleration
  particle-mass

  lost-particles  ;; particles that have escaped the pull of gravity (reached the top of the World & View)
                  ;; these particles are removed from the simulation
  percent-lost-particles
  ;; these next six variables are needed for continuity in logging in Modeling Across the Curriculum activities
  temperature
  volume
  pressure
  outside-energy
]

breed [ particles particle ]
breed [ flashes flash ]

flashes-own [ birthday ]

particles-own
[
  speed mass energy          ;; particle info
  last-collision
]

;;
;; Setup Procedures
;;
to setup
  clear-all
  set particle-mass 2.0
  set gravity-acceleration 9.8
  set-default-shape particles "circle"
  set-default-shape flashes "square"
  set max-tick-advance-amount 0.1073
  ;; box has constant size.
  set box-edge (max-pxcor)
  ;; make floor
  ask patches with [ pycor = ( - box-edge) ]
    [ set pcolor yellow ]
  make-particles
  update-variables
  set avg-speed-init avg-speed
  set avg-energy-init avg-energy
  ask particles [do-recolor]
  reset-ticks
end

to make-particles
  create-particles number-of-particles
  [
    setup-particle
    random-position
  ]
  calculate-tick-advance-amount
end

to setup-particle  ;; particle procedure
  set speed init-particle-speed
  set mass particle-mass
  set energy (0.5 * mass * (speed ^ 2))
  set last-collision nobody
  set color green
end

;; place particle at random location inside the box.
to random-position ;; particle procedure
  setxy random-xcor random-ycor
  set heading random-float 360
end

;;
;; Runtime Procedures
;;
to go
  ask particles [ bounce ]
  ask particles [ move ]
  if not any? particles [stop]  ;; particles can die when they float too high
  if collide? [ ask particles [ check-for-collision ] ]
  ifelse trace?
  [ if any? particles
    [ask min-one-of particles [who] [ pen-down ] ] ]
  [ ask particles [ pen-up ] ]
  tick-advance tick-advance-amount
  if floor ticks > floor (ticks - tick-advance-amount)
    [ update-variables ]
  calculate-tick-advance-amount
  ask flashes with [ticks - birthday > 0.4]
    [ die ]
  ask particles [ do-recolor ]
  ;; we use display because tick-advance does not trigger display updates the way 'tick' does
  display
end

to update-variables
  set temperature 0
  set volume 0
  set outside-energy 0
  set lost-particles (number-of-particles - count particles)
  set percent-lost-particles (lost-particles / number-of-particles) * 100
  set avg-speed  mean [speed] of particles
  set avg-energy  mean [energy] of particles
end

to calculate-tick-advance-amount
  ;; tick-advance-amount is calculated in such way that even the fastest
  ;; particle will jump at most 1 patch length in a clock tick. As
  ;; particles jump (speed * tick-advance-amount) at every clock tick, making
  ;; tick length the inverse of the speed of the fastest particle
  ;; (1/max speed) assures that. Having each particle advance at most
  ;; one patch-length is necessary for it not to "jump over" a wall
  ;; or another particle.
  ifelse any? particles with [speed > 0]
    [ set tick-advance-amount min list (1 / (ceiling max [speed] of particles)) max-tick-advance-amount ]
    [ set tick-advance-amount max-tick-advance-amount ]
end




to bounce  ;; particle procedure
  ;; get the coordinates of the patch we'll be on if we go forward 1
  let new-patch patch-ahead 1
  let new-px [pxcor] of new-patch
  let new-py [pycor] of new-patch
  ;; if we're not about to hit a wall, we don't need to do any further checks
  if [pcolor] of new-patch != yellow
    [ stop ]
  ;; if hitting the bottom, reflect heading around y axis
  if (new-py = ( - box-edge))
    [ set heading (180 - heading)]
  ask patch new-px new-py [
    sprout-flashes 1 [
      set color [pcolor] of patch-here - 2
      set birthday ticks
    ]
  ]
end

to move  ;; particle procedure
  ;; In other GasLab models, we use "jump speed * tick-advance-amount" to move the
  ;; turtle the right distance along its current heading.  In this
  ;; model, though, the particles are affected by gravity as well, so we
  ;; need to offset the turtle vertically by an additional amount.  The
  ;; easiest way to do this is to use "setxy" instead of "jump".
  ;; Trigonometry tells us that "jump speed * tick-advance-amount" is equivalent to:
  ;;   setxy (xcor + sin heading * speed * tick-advance-amount)
  ;;         (ycor + cos heading * speed * tick-advance-amount)
  ;; so to take gravity into account we just need to alter ycor
  ;; by an additional amount given by the classical physics equation:
  ;;   y(t) = 0.5*a*t^2 + v*t + y(t-1)
  ;; but taking tick-advance-amount into account, since tick-advance-amount is a multiplier of t.
setxy (xcor + sin heading * speed * tick-advance-amount)
           (ycor + cos heading * speed * tick-advance-amount - gravity-acceleration *
           (0.5 * (tick-advance-amount ^ 2)))
  factor-gravity

  if (pycor >= max-pycor) [ die ]
end

to factor-gravity  ;; turtle procedure
  let vx (sin heading * speed)
  let vy (cos heading * speed) - (gravity-acceleration * tick-advance-amount)
  set speed sqrt ((vy ^ 2) + (vx ^ 2))
  set heading atan vx vy
end



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAS MOLECULES COLLISIONS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;from GasLab

to check-for-collision ;; particle procedure
  ;; Here we impose a rule that collisions only take place when there
  ;; are exactly two particles per patch.  We do this because when the
  ;; student introduces new particles from the side, we want them to
  ;; form a uniform wavefront.
  ;;
  ;; Why do we want a uniform wavefront?  Because it is actually more
  ;; realistic.  (And also because the curriculum uses the uniform
  ;; wavefront to help teach the relationship between particle collisions,
  ;; wall hits, and pressure.)
  ;;
  ;; Why is it realistic to assume a uniform wavefront?  Because in reality,
  ;; whether a collision takes place would depend on the actual headings
  ;; of the particles, not merely on their proximity.  Since the particles
  ;; in the wavefront have identical speeds and near-identical headings,
  ;; in reality they would not collide.  So even though the two-particles
  ;; rule is not itself realistic, it produces a realistic result.  Also,
  ;; unless the number of particles is extremely large, it is very rare
  ;; for three or more particles to land on the same patch (for example,
  ;; with 400 particles it happens less than 1% of the time).  So imposing
  ;; this additional rule should have only a negligible effect on the
  ;; aggregate behavior of the system.
  ;;
  ;; Why does this rule produce a uniform wavefront?  The particles all
  ;; start out on the same patch, which means that without the only-two
  ;; rule, they would all start colliding with each other immediately,
  ;; resulting in much random variation of speeds and headings.  With
  ;; the only-two rule, they are prevented from colliding with each other
  ;; until they have spread out a lot.  (And in fact, if you observe
  ;; the wavefront closely, you will see that it is not completely smooth,
  ;; because some collisions eventually do start occurring when it thins out while fanning.)

  let candidates other particles-here
  if count candidates = 1 [
    ;; the following conditions are imposed on collision candidates:
    ;;  1. they must have a lower who number than my own, because collision
    ;;     code is asymmetrical: it must always happen from the point of view
    ;;     of just one particle.
    ;;  2. they must not be the same particle that we last collided with on
    ;;     this patch, so that we have a chance to leave the patch after we've
    ;;     collided with someone.
    ;;  3. we also only collide if one of us has non-zero speed. It's useless
    ;;     (and incorrect, actually) for two particles with zero speed to collide.
    let candidate one-of candidates with [
      (who < [ who ] of myself) and
      (last-collision != myself) and
      (speed > 0 or [ speed ] of myself > 0)
    ]
    if (candidate != nobody) [
      collide-with candidate
      set last-collision candidate
      ask candidate [ set last-collision myself ]
    ]
  ]
end


to collide-with [ other-particle ] ;; particle procedure
  ;; local copies of other-particle's relevant quantities:
  ;; mass2 speed2 heading2
  ;;
  ;; quantities used in the collision itself
  ;; theta   ;; heading of vector from my center to the center of other-particle.
  ;; v1t     ;; velocity of self along direction theta
  ;; v1l     ;; velocity of self perpendicular to theta
  ;; v2t v2l ;; velocity of other-particle, represented in the same way
  ;; vcm     ;; velocity of the center of mass of the colliding particles,
             ;;   along direction theta
  ;;; PHASE 1: initial setup

  ;; for convenience, grab some quantities from other-particle
  let mass2 [mass] of other-particle
  let speed2 [speed] of other-particle
  let heading2 [heading] of other-particle

  ;; since particles are modeled as zero-size points, theta isn't meaningfully
  ;; defined. we can assign it randomly without affecting the model's outcome.
  let theta (random-float 360)



  ;;; PHASE 2: convert velocities to theta-based vector representation

  ;; now convert my velocity from speed/heading representation to components
  ;; along theta and perpendicular to theta
  let v1t (speed * cos (theta - heading))
  let v1l (speed * sin (theta - heading))

  ;; do the same for other-particle
  let v2t (speed2 * cos (theta - heading2))
  let v2l (speed2 * sin (theta - heading2))



  ;;; PHASE 3: manipulate vectors to implement collision

  ;; compute the velocity of the system's center of mass along theta
  let vcm (((mass * v1t) + (mass2 * v2t)) / (mass + mass2) )

  ;; now compute the new velocity for each particle along direction theta.
  ;; velocity perpendicular to theta is unaffected by a collision along theta,
  ;; so the next two lines actually implement the collision itself, in the
  ;; sense that the effects of the collision are exactly the following changes
  ;; in particle velocity.
  set v1t (2 * vcm - v1t)
  set v2t (2 * vcm - v2t)



  ;;; PHASE 4: convert back to normal speed/heading

  ;; now convert my velocity vector into my new speed and heading
  set speed sqrt ((v1t ^ 2) + (v1l ^ 2))
  set energy (0.5 * mass * (speed ^ 2))
  ;; if the magnitude of the velocity vector is 0, atan is undefined. but
  ;; speed will be 0, so heading is irrelevant anyway. therefore, in that
  ;; case we'll just leave it unmodified.
  if v1l != 0 or v1t != 0
    [ set heading (theta - (atan v1l v1t)) ]

  ;; and do the same for other-particle
  ;; and do the same for other-particle
  ask other-particle [
    set speed sqrt ((v2t ^ 2) + (v2l ^ 2))
    set energy (0.5 * mass * (speed ^ 2))
    if v2l != 0 or v2t != 0
      [ set heading (theta - (atan v2l v2t)) ]
  ]



end

to decrease-gravity
  set gravity-acceleration (gravity-acceleration - .7)
  if gravity-acceleration < 0 [set gravity-acceleration 0]
end

to increase-gravity
  set gravity-acceleration (gravity-acceleration + .7)
  if gravity-acceleration > 21 [set gravity-acceleration 21]
end

to do-recolor
  if speed-as-color? = "red-green-blue" [  recolor-rgb  ]
  if speed-as-color? = "purple shades" [ recolorshade  ]
  if speed-as-color? = "one color" [  recolornone  ]
  if speed-as-color? = "custom color" [ ]

end

to recolor-rgb  ;; particle procedure
  ifelse speed < (0.5 * 10)
  [
    set color blue
  ]
  [
    ifelse speed > (1.5 * 10)
      [ set color red ]
      [ set color green ]
  ]
end

to recolorshade
  ifelse speed < 27
  [ set color 111 + speed / 3 ]
  [ set color 119.999 ]
end

to recolornone
  set color green - 1
end


; Copyright 2006 Uri Wilensky.
; See Info tab for full copyright and license.]]></code><modelSettings/><hubnet/></model>
