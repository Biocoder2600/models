<?xml version='1.0' encoding='UTF-8'?>
<model xmlns="http://ccl.northwestern.edu/netlogo/6.1"><version><![CDATA[NetLogo 6.0.2]]></version><previewCommands><manual/></previewCommands><info><![CDATA[## WHAT IS IT?

This model is included here in "Code Examples" as an example of taking an existing model and adding sound to it.

The original model comes from the GasLab model suite, in the Chemistry & Physics section of the Models Library. Those models were incorporated into a curriculum, Connected Chemistry. The Connected Chemistry models are in the models library in the curricular models section.

For more information on Connected Chemistry, see:
Wilensky, U., Levy, S. T., & Novak, M. (2004). Connected Chemistry curriculum. http://ccl.northwestern.edu/curriculum/chemistry/. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL

The code for this model comes form the Connected Chemistry models, with an important addition. The model is "sonified", that is events in the model, such as a particle hitting a wall, or colliding with another particle,  make sounds. Changes in the plots also make sounds. This is another form of feedback for the user, and has been used by blind students to make sense of the model without visuals.

The idea for sonifying the GasLab models for use with blind students is due to **Sharona Levy**. This version of the model is her sonification of a Connected Chemistry model.

<!-- 2004 MAC specialCE -->]]></info><systemDynamics/><linkShapes><linkShape curviness="0.0" name="default"><line stroke-dasharray="0.0,1.0" isVisible="false" offset="-0.2"/><line stroke-dasharray="1.0,0.0" isVisible="true" offset="0.0"/><line stroke-dasharray="0.0,1.0" isVisible="false" offset="0.2"/><indicator editableColorIndex="0" rotatable="true" name="link direction"><elements><line marked="true" filled="false" color="#8D8D8D" y2="180" x2="90" y1="150" x1="150"/><line marked="true" filled="false" color="#8D8D8D" y2="180" x2="210" y1="150" x1="150"/></elements></indicator></linkShape></linkShapes><widgets><view frameRate="30.0" showTickCounter="true" fontSize="10" bottom="287" right="546" top="10" left="270"><dimensions maxPycor="33" minPycor="-33" maxPxcor="33" minPxcor="-33" wrapInY="false" wrapInX="false" patchSize="4.0"/><tickCounterLabel><![CDATA[ticks]]></tickCounterLabel></view><button ticksEnabled="true" forever="true" bottom="78" right="260" top="45" left="160"><source><![CDATA[go]]></source><display><![CDATA[go/stop]]></display></button><button ticksEnabled="false" forever="false" bottom="40" right="260" top="7" left="160"><source><![CDATA[setup]]></source></button><plot bottom="309" right="768" top="155" left="565" ymax="200.0" ymin="0.0" xmax="20.0" xmin="0.0" legendOn="false" autoPlotOn="true"><display><![CDATA[Number vs. Time]]></display><xAxis><![CDATA[time]]></xAxis><yAxis><![CDATA[number]]></yAxis><setup><![CDATA[set-plot-y-range 0 initial-number + 1]]></setup><update><![CDATA[]]></update><pens><pen inLegend="true" color="-16777216" mode="0" interval="1.0"><setup><![CDATA[]]></setup><update><![CDATA[plotxy ticks (count particles)]]></update><display><![CDATA[default]]></display></pen></pens></plot><slider direction="horizontal" default="25.0" bottom="113" right="155" top="80" left="5"><maximum><![CDATA[100]]></maximum><minimum><![CDATA[0]]></minimum><step><![CDATA[1]]></step><variable><![CDATA[number-to-add]]></variable></slider><button ticksEnabled="true" forever="false" bottom="114" right="260" top="81" left="160"><source><![CDATA[set particles-to-add
    particles-to-add +
      number-to-add]]></source><display><![CDATA[add particles]]></display></button><slider direction="horizontal" default="25.0" bottom="77" right="155" top="44" left="5"><maximum><![CDATA[100]]></maximum><minimum><![CDATA[0]]></minimum><step><![CDATA[1]]></step><variable><![CDATA[initial-number]]></variable></slider><monitor precision="0" fontSize="11" bottom="170" right="133" top="125" left="35"><source><![CDATA[count particles]]></source><display><![CDATA[Number]]></display></monitor><plot bottom="155" right="769" top="10" left="566" ymax="100.0" ymin="0.0" xmax="20.0" xmin="0.0" legendOn="false" autoPlotOn="true"><display><![CDATA[Pressure vs. Time]]></display><xAxis><![CDATA[time]]></xAxis><yAxis><![CDATA[pressure]]></yAxis><setup><![CDATA[]]></setup><update><![CDATA[]]></update><pens><pen inLegend="true" color="-16777216" mode="0" interval="1.0"><setup><![CDATA[]]></setup><update><![CDATA[if length pressure-history > 0
[
  ;; pressure plot is 'smoothed' by averaging 3 sequential values, only if switch is set this way
  ifelse avg-plot-pressure?  
    [ plotxy ticks (mean last-n 3 pressure-history) ]
    [ plotxy ticks pressure ]
]]]></update><display><![CDATA[default]]></display></pen></pens></plot><monitor precision="0" fontSize="11" bottom="170" right="244" top="125" left="135"><source><![CDATA[pressure]]></source><display><![CDATA[pressure]]></display></monitor><switch isOn="false" bottom="503" right="383" top="470" left="270"><variable><![CDATA[collisions?]]></variable></switch><switch isOn="false" bottom="468" right="382" top="435" left="270"><variable><![CDATA[wall-hits?]]></variable></switch><switch isOn="false" bottom="378" right="230" top="345" left="45"><variable><![CDATA[model-time?]]></variable></switch><switch isOn="false" bottom="413" right="230" top="380" left="45"><variable><![CDATA[real-time?]]></variable></switch><switch isOn="true" bottom="463" right="770" top="430" left="565"><variable><![CDATA[single-particle-speed?]]></variable></switch><switch isOn="true" bottom="496" right="770" top="463" left="565"><variable><![CDATA[single-particle-wall-hits?]]></variable></switch><switch isOn="true" bottom="528" right="770" top="495" left="565"><variable><![CDATA[single-particle-collisions?]]></variable></switch><slider direction="horizontal" default="1.325" bottom="448" right="230" top="415" left="45"><maximum><![CDATA[5]]></maximum><minimum><![CDATA[0.5]]></minimum><step><![CDATA[0.025]]></step><units><![CDATA[sec]]></units><variable><![CDATA[real-time-pacer]]></variable></slider><switch isOn="false" bottom="306" right="245" top="273" left="35"><variable><![CDATA[announce-add-particles?]]></variable></switch><textbox transparent="false" color="#000000" fontSize="11" bottom="343" right="741" top="325" left="600"><display><![CDATA[Listen to one particle]]></display></textbox><switch isOn="false" bottom="433" right="382" top="400" left="270"><variable><![CDATA[pressure?]]></variable></switch><textbox transparent="false" color="#000000" fontSize="11" bottom="345" right="497" top="327" left="323"><display><![CDATA[Listen to all the particles]]></display></textbox><textbox transparent="false" color="#000000" fontSize="11" bottom="339" right="201" top="321" left="63"><display><![CDATA[Time in a model]]></display></textbox><slider direction="horizontal" default="30.0" bottom="503" right="550" top="470" left="385"><maximum><![CDATA[100]]></maximum><minimum><![CDATA[0]]></minimum><step><![CDATA[5]]></step><variable><![CDATA[collisions-loudness]]></variable></slider><slider direction="horizontal" default="30.0" bottom="468" right="550" top="435" left="385"><maximum><![CDATA[100]]></maximum><minimum><![CDATA[0]]></minimum><step><![CDATA[5]]></step><variable><![CDATA[wall-hits-loudness]]></variable></slider><slider direction="horizontal" default="60.0" bottom="433" right="550" top="400" left="385"><maximum><![CDATA[120]]></maximum><minimum><![CDATA[0]]></minimum><step><![CDATA[5]]></step><variable><![CDATA[pressure-loudness]]></variable></slider><button ticksEnabled="false" forever="false" bottom="258" right="135" top="225" left="70"><source><![CDATA[set real-time? true 
set model-time? true 
set pressure? true 
set wall-hits? true 
set collisions? true 
set single-particle-speed? true 
set single-particle-collisions? true
set single-particle-wall-hits? true 
set announce-add-particles? true]]></source><display><![CDATA[all on]]></display></button><button ticksEnabled="false" forever="false" bottom="258" right="202" top="225" left="136"><source><![CDATA[sound:stop-music
set collisions? false
set single-particle-speed? false 
set single-particle-collisions? false
set single-particle-wall-hits? false
set announce-add-particles? false
set model-time? false
set real-time? false
set pressure? false
set wall-hits? false]]></source><display><![CDATA[all off]]></display></button><slider direction="horizontal" default="30.0" bottom="427" right="770" top="394" left="565"><maximum><![CDATA[80]]></maximum><minimum><![CDATA[0]]></minimum><step><![CDATA[5]]></step><variable><![CDATA[single-particle-loudness]]></variable></slider><monitor precision="1" fontSize="11" bottom="221" right="244" top="176" left="35"><source><![CDATA[[speed] of particle 3]]></source><display><![CDATA[single speed]]></display></monitor><switch isOn="false" bottom="503" right="230" top="470" left="45"><variable><![CDATA[avg-plot-pressure?]]></variable></switch><button ticksEnabled="false" forever="false" bottom="391" right="384" top="358" left="295"><source><![CDATA[set pressure? true set wall-hits? true set collisions? true]]></source><display><![CDATA[group on]]></display></button><button ticksEnabled="false" forever="false" bottom="391" right="475" top="358" left="385"><source><![CDATA[set pressure? false set wall-hits? false set collisions? false]]></source><display><![CDATA[group off]]></display></button><button ticksEnabled="false" forever="false" bottom="389" right="665" top="356" left="577"><source><![CDATA[set single-particle-speed? true set single-particle-collisions? true set single-particle-wall-hits? true]]></source><display><![CDATA[single on]]></display></button><button ticksEnabled="false" forever="false" bottom="389" right="757" top="356" left="668"><source><![CDATA[set single-particle-speed? false 
set single-particle-collisions? false 
set single-particle-wall-hits? false]]></source><display><![CDATA[single off]]></display></button></widgets><experiments/><shapes><turtleShape editableColorIndex="0" rotatable="true" name="default"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,5 40,250 150,205 260,250"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="airplane"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,0 135,15 120,60 120,105 15,165 15,195 120,180 135,240 105,270 120,285 150,270 180,285 210,270 165,240 180,180 285,195 285,165 180,105 180,60 165,15"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="arrow"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,0 0,150 105,150 105,293 195,293 195,150 300,150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="box"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,285 285,225 285,75 150,135"/><polygon marked="true" filled="true" color="#8D8D8D" points="150,135 15,75 150,15 285,75"/><polygon marked="true" filled="true" color="#8D8D8D" points="15,75 15,225 150,285 150,135"/><line marked="false" filled="false" color="#000000" y2="135" x2="150" y1="285" x1="150"/><line marked="false" filled="false" color="#000000" y2="75" x2="15" y1="135" x1="150"/><line marked="false" filled="false" color="#000000" y2="75" x2="285" y1="135" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="bug"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="182" cx="96"/><circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="127" cx="110"/><circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="75" cx="110"/><line marked="true" filled="false" color="#8D8D8D" y2="30" x2="80" y1="100" x1="150"/><line marked="true" filled="false" color="#8D8D8D" y2="30" x2="220" y1="100" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="butterfly"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,165 209,199 225,225 225,255 195,270 165,255 150,240"/><polygon marked="true" filled="true" color="#8D8D8D" points="150,165 89,198 75,225 75,255 105,270 135,255 150,240"/><polygon marked="true" filled="true" color="#8D8D8D" points="139,148 100,105 55,90 25,90 10,105 10,135 25,180 40,195 85,194 139,163"/><polygon marked="true" filled="true" color="#8D8D8D" points="162,150 200,105 245,90 275,90 290,105 290,135 275,180 260,195 215,195 162,165"/><polygon marked="false" filled="true" color="#000000" points="150,255 135,225 120,150 135,120 150,105 165,120 180,150 165,225"/><circle marked="false" filled="true" color="#000000" diameter="30" cy="90" cx="135"/><line marked="false" filled="false" color="#000000" y2="60" x2="195" y1="105" x1="150"/><line marked="false" filled="false" color="#000000" y2="60" x2="105" y1="105" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="car"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="300,180 279,164 261,144 240,135 226,132 213,106 203,84 185,63 159,50 135,50 75,60 0,150 0,165 0,225 300,225 300,180"/><circle marked="false" filled="true" color="#000000" diameter="90" cy="180" cx="180"/><circle marked="false" filled="true" color="#000000" diameter="90" cy="180" cx="30"/><polygon marked="false" filled="true" color="#000000" points="162,80 132,78 134,135 209,135 194,105 189,96 180,89"/><circle marked="true" filled="true" color="#8D8D8D" diameter="58" cy="195" cx="47"/><circle marked="true" filled="true" color="#8D8D8D" diameter="58" cy="195" cx="195"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="circle"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="circle 2"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/><circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="clock"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="240" cy="30" cx="30"/><polygon marked="false" filled="true" color="#000000" points="150,31 128,75 143,75 143,150 158,150 158,75 173,75"/><circle marked="false" filled="true" color="#000000" diameter="30" cy="135" cx="135"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="cow"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="200,193 197,249 179,249 177,196 166,187 140,189 93,191 78,179 72,211 49,209 48,181 37,149 25,120 25,89 45,72 103,84 179,75 198,76 252,64 272,81 293,103 285,121 255,121 242,118 224,167"/><polygon marked="true" filled="true" color="#8D8D8D" points="73,210 86,251 62,249 48,208"/><polygon marked="true" filled="true" color="#8D8D8D" points="25,114 16,195 9,204 23,213 25,200 39,123"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="cylinder"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="dot"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="120" cy="90" cx="90"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="face happy"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="8" cx="8"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/><polygon marked="false" filled="true" color="#000000" points="150,255 90,239 62,213 47,191 67,179 90,203 109,218 150,225 192,218 210,203 227,181 251,194 236,217 212,240"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="face neutral"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="7" cx="8"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/><rect marked="false" filled="true" color="#000000" height="30" width="180" y="195" x="60"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="face sad"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="8" cx="8"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/><polygon marked="false" filled="true" color="#000000" points="150,168 90,184 62,210 47,232 67,244 90,220 109,205 150,198 192,205 210,220 227,242 251,229 236,206 212,183"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="fish"><elements><polygon marked="false" filled="true" color="#FFFFFF" points="44,131 21,87 15,86 0,120 15,150 0,180 13,214 20,212 45,166"/><polygon marked="false" filled="true" color="#FFFFFF" points="135,195 119,235 95,218 76,210 46,204 60,165"/><polygon marked="false" filled="true" color="#FFFFFF" points="75,45 83,77 71,103 86,114 166,78 135,60"/><polygon marked="true" filled="true" color="#8D8D8D" points="30,136 151,77 226,81 280,119 292,146 292,160 287,170 270,195 195,210 151,212 30,166"/><circle marked="false" filled="true" color="#000000" diameter="30" cy="106" cx="215"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="flag"><elements><rect marked="true" filled="true" color="#8D8D8D" height="285" width="15" y="15" x="60"/><polygon marked="true" filled="true" color="#8D8D8D" points="90,150 270,90 90,30"/><line marked="true" filled="false" color="#8D8D8D" y2="135" x2="90" y1="135" x1="75"/><line marked="true" filled="false" color="#8D8D8D" y2="45" x2="90" y1="45" x1="75"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="flower"><elements><polygon marked="false" filled="true" color="#59B03C" points="135,120 165,165 180,210 180,240 150,300 165,300 195,240 195,195 165,135"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="132" cx="85"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="147" cx="130"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="85" cx="192"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="40" cx="85"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="40" cx="177"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="132" cx="177"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="85" cx="70"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="25" cx="130"/><circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="51" cx="96"/><circle marked="false" filled="true" color="#000000" diameter="74" cy="68" cx="113"/><polygon marked="false" filled="true" color="#59B03C" points="189,233 219,188 249,173 279,188 234,218"/><polygon marked="false" filled="true" color="#59B03C" points="180,255 150,210 105,210 75,240 135,240"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="house"><elements><rect marked="true" filled="true" color="#8D8D8D" height="165" width="210" y="120" x="45"/><rect marked="false" filled="true" color="#000000" height="75" width="60" y="210" x="120"/><polygon marked="true" filled="true" color="#8D8D8D" points="15,120 150,15 285,120"/><line marked="false" filled="false" color="#000000" y2="120" x2="270" y1="120" x1="30"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="leaf"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,210 135,195 120,210 60,210 30,195 60,180 60,165 15,135 30,120 15,105 40,104 45,90 60,90 90,105 105,120 120,120 105,60 120,60 135,30 150,15 165,30 180,60 195,60 180,120 195,120 210,105 240,90 255,90 263,104 285,105 270,120 285,135 240,165 240,180 270,195 240,210 180,210 165,195"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,195 135,240 120,255 105,255 105,285 135,285 165,240 165,195"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="line"><elements><line marked="true" filled="false" color="#8D8D8D" y2="300" x2="150" y1="0" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="line half"><elements><line marked="true" filled="false" color="#8D8D8D" y2="150" x2="150" y1="0" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="pentagon"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,15 15,120 60,285 240,285 285,120"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="person"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="5" cx="110"/><polygon marked="true" filled="true" color="#8D8D8D" points="105,90 120,195 90,285 105,300 135,300 150,225 165,300 195,300 210,285 180,195 195,90"/><rect marked="true" filled="true" color="#8D8D8D" height="15" width="45" y="79" x="127"/><polygon marked="true" filled="true" color="#8D8D8D" points="195,90 240,150 225,180 165,105"/><polygon marked="true" filled="true" color="#8D8D8D" points="105,90 60,150 75,180 135,105"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="plant"><elements><rect marked="true" filled="true" color="#8D8D8D" height="210" width="30" y="90" x="135"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,255 90,210 45,195 75,255 135,285"/><polygon marked="true" filled="true" color="#8D8D8D" points="165,255 210,210 255,195 225,255 165,285"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,180 90,135 45,120 75,180 135,210"/><polygon marked="true" filled="true" color="#8D8D8D" points="165,180 165,210 225,180 255,120 210,135"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,105 90,60 45,45 75,105 135,135"/><polygon marked="true" filled="true" color="#8D8D8D" points="165,105 165,135 225,105 255,45 210,60"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,90 120,45 150,15 180,45 165,90"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="square"><elements><rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="square 2"><elements><rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/><rect marked="false" filled="true" color="#000000" height="180" width="180" y="60" x="60"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="star"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="151,1 185,108 298,108 207,175 242,282 151,216 59,282 94,175 3,108 116,108"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="target"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/><circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/><circle marked="true" filled="true" color="#8D8D8D" diameter="180" cy="60" cx="60"/><circle marked="false" filled="true" color="#000000" diameter="120" cy="90" cx="90"/><circle marked="true" filled="true" color="#8D8D8D" diameter="60" cy="120" cx="120"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="tree"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="94" cy="3" cx="118"/><rect marked="false" filled="true" color="#9D6E48" height="105" width="60" y="195" x="120"/><circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="21" cx="65"/><circle marked="true" filled="true" color="#8D8D8D" diameter="127" cy="41" cx="116"/><circle marked="true" filled="true" color="#8D8D8D" diameter="120" cy="90" cx="45"/><circle marked="true" filled="true" color="#8D8D8D" diameter="152" cy="74" cx="104"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="triangle"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,30 15,255 285,255"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="triangle 2"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,30 15,255 285,255"/><polygon marked="false" filled="true" color="#000000" points="151,99 225,223 75,224"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="truck"><elements><rect marked="true" filled="true" color="#8D8D8D" height="142" width="191" y="45" x="4"/><polygon marked="true" filled="true" color="#8D8D8D" points="296,193 296,150 259,134 244,104 208,104 207,194"/><rect marked="false" filled="true" color="#FFFFFF" height="45" width="0" y="60" x="195"/><polygon marked="false" filled="true" color="#000000" points="238,112 252,141 219,141 218,112"/><circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="234"/><rect marked="true" filled="true" color="#8D8D8D" height="9" width="33" y="185" x="181"/><circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="144"/><circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="24"/><circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="24"/><circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="144"/><circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="234"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="turtle"><elements><polygon marked="false" filled="true" color="#59B03C" points="215,204 240,233 246,254 228,266 215,252 193,210"/><polygon marked="false" filled="true" color="#59B03C" points="195,90 225,75 245,75 260,89 269,108 261,124 240,105 225,105 210,105"/><polygon marked="false" filled="true" color="#59B03C" points="105,90 75,75 55,75 40,89 31,108 39,124 60,105 75,105 90,105"/><polygon marked="false" filled="true" color="#59B03C" points="132,85 134,64 107,51 108,17 150,2 192,18 192,52 169,65 172,87"/><polygon marked="false" filled="true" color="#59B03C" points="85,204 60,233 54,254 72,266 85,252 107,210"/><polygon marked="true" filled="true" color="#8D8D8D" points="119,75 179,75 209,101 224,135 220,225 175,261 128,261 81,224 74,135 88,99"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="wheel"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="294" cy="3" cx="3"/><circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/><line marked="true" filled="false" color="#8D8D8D" y2="15" x2="150" y1="285" x1="150"/><line marked="true" filled="false" color="#8D8D8D" y2="150" x2="285" y1="150" x1="15"/><circle marked="true" filled="true" color="#8D8D8D" diameter="60" cy="120" cx="120"/><line marked="true" filled="false" color="#8D8D8D" y2="269" x2="79" y1="40" x1="216"/><line marked="true" filled="false" color="#8D8D8D" y2="221" x2="269" y1="84" x1="40"/><line marked="true" filled="false" color="#8D8D8D" y2="79" x2="269" y1="216" x1="40"/><line marked="true" filled="false" color="#8D8D8D" y2="269" x2="221" y1="40" x1="84"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="x"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="270,75 225,30 30,225 75,270"/><polygon marked="true" filled="true" color="#8D8D8D" points="30,75 75,30 270,225 225,270"/></elements></turtleShape></shapes><code><![CDATA[extensions [ sound ]

globals
[
  tick-delta                 ;; how much we advance the tick counter this time through
  max-tick-delta             ;; the largest tick-delta is allowed to be
  box-edge                   ;; distance of box edge from axes
  pressure
  pressure-history
  zero-pressure-count        ;; how many zero entries are in pressure-history
  wall-hits-per-particle     ;; average number of wall hits per particle
  particles-to-add
  new-particles              ;; agentset of particles added via add-particles-middle
  message-shown?             ;; whether we've shown the warning message yet
  length-horizontal-surface  ;; the size of the wall surfaces that run horizontally - the top and bottom of the box
  length-vertical-surface    ;; the size of the wall surfaces that run vertically - the left and right of the box
  three-speed                ;; current speed of particle 3 (music addition)
  pressure-now               ;; current pressure (music addition
]

breed [ particles particle ]
breed [ flashes flash ]

flashes-own [birthday]

particles-own
[
  speed mass                 ;; particle info
  wall-hits                  ;; # of wall hits during this clock cycle ("big tick")
  momentum-difference        ;; used to calculate pressure from wall hits
  last-collision
  new?                       ;; used to build the new-particles agentset; this is
                             ;; only ever set to true by add-particles-middle
]

to startup
  set message-shown? false
end

to setup
  sound:stop-music  ;; start music by closing previous one
  let tmp message-shown?
  clear-all
  set message-shown? tmp
  set-default-shape particles "circle"
  set-default-shape flashes "square"
  set particles-to-add 0
  ;; box has constant size...
  set box-edge (max-pxcor - 1)
  ;;; the length of the horizontal or vertical surface of
  ;;; the inside of the box must exclude the two patches
  ;; that are the where the perpendicular walls join it,
  ;;; but must also add in the axes as an additional patch
  ;;; example:  a box with a box-edge of 10, is drawn with
  ;;; 19 patches of wall space on the inside of the box
  set length-horizontal-surface  ( 2 * (box-edge - 1) + 1)
  set length-vertical-surface  ( 2 * (box-edge - 1) + 1)
  make-box
  make-particles initial-number
  set pressure-history []
  set zero-pressure-count 0
  reset-ticks
  set pressure-now pressure ;; setup for current pressure
  set three-speed [speed] of particle 3  ;; setup for current particle speed
end

to go
  if not single-particle-speed? and three-speed > 0  ;; making sure that particle speed is sonified only when switch is on
        [ sound:stop-note "oboe" (80 - 120 / ( three-speed ))
          sound:stop-note "oboe" 50 ]
  if not pressure? and pressure > 0  ; making sure that pressure is sonified only when switch is on
        [ sound:stop-note "recorder" ( 100 - 2000 / pressure )
          sound:stop-note "recorder" 20 ]
  if single-particle-speed?
     [ ask particle 3  ;; asking particle 3 to make sound, changes note when speed changes, taking care of clock = 0
         [
           ifelse  ((abs (speed - three-speed) > 0 ) )
                     or (abs (speed - three-speed ) = speed )
              [ sing-one-particle-speed ]
              [ ifelse ticks > 0
                [ stop ]
                [ sound:start-note "oboe" (80 - 120 / ( [speed] of particle 3 )) single-particle-loudness - 10]
               ]
          ]
      ]
  if real-time? [ sing-real-time ]  ;; sonify the real time ticker
  ask particles
      [ set new? false ]
  ask particles [ bounce ]
  ask particles [ move ]
  ask particles
    [ check-for-collision ]
  add-particles-side
  tick-advance tick-delta
  if floor ticks > floor (ticks - tick-delta)
      [ ifelse any? particles
          [ set wall-hits-per-particle mean [wall-hits] of particles ]
          [ set wall-hits-per-particle 0 ]
  ask particles
          [ set wall-hits 0 ]
  calculate-pressure
  update-plots
  if model-time? [ sound:play-note "nylon string guitar" 26 83 0.1 ] ] ;; sing model time
  calculate-tick-length
  ask flashes with [ticks - birthday > 0.4]
      [ set pcolor yellow
        die ]
  ifelse (single-particle-speed? or single-particle-collisions? or single-particle-wall-hits? )  ;; single particle speed is traced
      [ ask particle 3 [ pen-down ] ]
      [ ask particle 3 [ pen-up ] ]
  fade-patches ;; if the single particle is tracing, then the trace disappears after a while
end

to calculate-tick-length
  ifelse any? particles with [speed > 0]
    [ set tick-delta 1 / (ceiling max [speed] of particles) ]
    [ set tick-delta 1 ]
end

;;; Pressure is defined as the force per unit area.  In this context,
;;; that means the total momentum per unit time transferred to the walls
;;; by particle hits, divided by the surface area of the walls.  (Here
;;; we're in a two dimensional world, so the "surface area" of the walls
;;; is just their length.)  Each wall contributes a different amount
;;; to the total pressure in the box, based on the number of collisions, the
;;; direction of each collision, and the length of the wall.  Conservation of momentum
;;; in hits ensures that the difference in momentum for the particles is equal to and
;;; opposite to that for the wall.  The force on each wall is the rate of change in
;;; momentum imparted to the wall, or the sum of change in momentum for each particle:
;;; F = SUM  [d(mv)/dt] = SUM [m(dv/dt)] = SUM [ ma ], in a direction perpendicular to
;;; the wall surface.  The pressure (P) on a given wall is the force (F) applied to that
;;; wall over its surface area.  The total pressure in the box is sum of each wall's
;;; pressure contribution.

to calculate-pressure
  ;; by summing the momentum change for each particle,
  ;; the wall's total momentum change is calculated
  set pressure 15 * sum [momentum-difference] of particles
  set pressure-history lput pressure pressure-history
  set zero-pressure-count length filter [ n -> n = 0 ] pressure-history
  ask particles
    [ set momentum-difference 0 ]  ;; once the contribution to momentum has been calculated
                                   ;; this value is reset to zero till the next wall hit
  ifelse pressure? ;; when pressure changes, it sings
    [ sing-pressure ]
    [ ifelse pressure-now > 0
      [ sound:stop-note "recorder" ( 100 - 2000 / pressure-now )
        sound:stop-note "recorder" ( 30 ) ]
      [ stop ]
    ]
end

to bounce  ;; particle procedure
  let tone heading
  ;; if we're not about to hit a wall (yellow patch), or if we're already on a
  ;; wall, we don't need to do any further checks
  if shade-of? yellow pcolor or not shade-of? yellow [pcolor] of patch-at dx dy
    [ stop ]
  ;; get the coordinates of the patch we'll be on if we go forward 1
  let new-px round (xcor + dx)
  let new-py round (ycor + dy)
  ;; if hitting left or right wall, reflect heading around x axis
  if (abs new-px = box-edge)
    [ set heading (- heading)
      set wall-hits wall-hits + 1
      if (wall-hits?) [ sound:play-note "celesta" tone wall-hits-loudness 0.15 ] ;; when a particle hits the wall there's  sound (macro)
      if (single-particle-wall-hits? and who = 3) ;; when a particle hits the wall there's  sound (micro)
        [ ask particle 3 [ pen-down ] sound:play-note "clavi" ( 30 + heading / 5 ) wall-hits-loudness 0.2 ]

  ;;  if the particle is hitting a vertical wall, only the horizontal component of the speed
  ;;  vector can change.  The change in velocity for this component is 2 * the speed of the particle,
  ;; due to the reversing of direction of travel from the collision with the wall
      set momentum-difference momentum-difference + (abs (dx * 2 * mass * speed) / length-vertical-surface)
    ]
  ;; if hitting top or bottom wall, reflect heading around y axis
  if (abs new-py = box-edge)
    [ set heading (180 - heading)
      set wall-hits wall-hits + 1
      if wall-hits? [ sound:play-note "celesta" heading  single-particle-loudness 0.1 ]
  if (single-particle-wall-hits? and who = 3)
     [ ask particle 3 [ pen-down ] sound:play-note "clavi" ( 30 + heading / 5 ) single-particle-loudness 0.1 ]

  ;;  if the particle is hitting a horizontal wall, only the vertical component of the speed
  ;;  vector can change.  The change in velocity for this component is 2 * the speed of the particle,
  ;; due to the reversing of direction of travel from the collision with the wall
      set momentum-difference momentum-difference + (abs (dy * 2 * mass * speed) / length-horizontal-surface)  ]
  ask patch new-px new-py
    [ sprout-flashes 1 [ hide-turtle
                         set birthday ticks
                         set pcolor yellow - 3 ] ]
end

to move  ;; particle procedure
  if patch-ahead (speed * tick-delta) != patch-here
    [ set last-collision nobody ]
  jump (speed * tick-delta)
end

to check-for-collision  ;; particle procedure

  ;; Here we impose a rule that collisions only take place when there
  ;; are exactly two particles per patch.  We do this because when the
  ;; student introduces new particles from the side, we want them to
  ;; form a uniform wavefront.
  ;;
  ;; Why do we want a uniform wavefront?  Because it is actually more
  ;; realistic.  (And also because the curriculum uses the uniform
  ;; wavefront to help teach the relationship between particle collisions,
  ;; wall hits, and pressure.)
  ;;
  ;; Why is it realistic to assume a uniform wavefront?  Because in reality,
  ;; whether a collision takes place would depend on the actual headings
  ;; of the particles, not merely on their proximity.  Since the particles
  ;; in the wavefront have identical speeds and near-identical headings,
  ;; in reality they would not collide.  So even though the two-particles
  ;; rule is not itself realistic, it produces a realistic result.  Also,
  ;; unless the number of particles is extremely large, it is very rare
  ;; for three or more particles to land on the same patch (for example,
  ;; with 400 particles it happens less than 1% of the time).  So imposing
  ;; this additional rule should have only a negligible effect on the
  ;; aggregate behavior of the system.
  ;;
  ;; Why does this rule produce a uniform wavefront?  The particles all
  ;; start out on the same patch, which means that without the only-two
  ;; rule, they would all start colliding with each other immediately,
  ;; resulting in much random variation of speeds and headings.  With
  ;; the only-two rule, they are prevented from colliding with each other
  ;; until they have spread out a lot.  (And in fact, if you observe
  ;; the wavefront closely, you will see that it is not completely smooth,
  ;; because some collisions eventually do start occurring when it thins out while fanning.)

  if count other particles-here = 1
  [
    ;; the following conditions are imposed on collision candidates:
    ;;   1. they must have a lower who number than my own, because collision
    ;;      code is asymmetrical: it must always happen from the point of view
    ;;      of just one particle.
    ;;   2. they must not be the same particle that we last collided with on
    ;;      this patch, so that we have a chance to leave the patch after we've
    ;;      collided with someone.
    let candidate one-of other particles-here with
      [who < [who] of myself and myself != last-collision]
    ;; we also only collide if one of us has non-zero speed. It's useless
    ;; (and incorrect, actually) for two particles with zero speed to collide.
    if (candidate != nobody) and (speed > 0 or [speed] of candidate > 0)
    [
      collide-with candidate
      set last-collision candidate
      ask candidate [ set last-collision myself ]
      if collisions? ;; make a sound when there's a collision that is a function of the sum of their speeds (macro)
        [ sound:play-note "telephone ring" 2 * ([speed] of self + [speed] of candidate) collisions-loudness 0.15 ]
      ;; make a sound when there's a collision that is a function of the sum of their speeds (micro)
      if (single-particle-collisions? and ( who = 3 or [who] of candidate = 3 ))
         [ ask particle 3 [ pen-down ] sound:play-note "glockenspiel" 69 single-particle-loudness + 40 0.2 ]

    ]
  ]
end

;; implements a collision with another particle.
;;
;; THIS IS THE HEART OF THE PARTICLE SIMULATION, AND YOU ARE STRONGLY ADVISED
;; NOT TO CHANGE IT UNLESS YOU REALLY UNDERSTAND WHAT YOU'RE DOING!
;;
;; The two particles colliding are self and other-particle, and while the
;; collision is performed from the point of view of self, both particles are
;; modified to reflect its effects. This is somewhat complicated, so I'll
;; give a general outline here:
;;   1. Do initial setup, and determine the heading between particle centers
;;      (call it theta).
;;   2. Convert the representation of the velocity of each particle from
;;      speed/heading to a theta-based vector whose first component is the
;;      particle's speed along theta, and whose second component is the speed
;;      perpendicular to theta.
;;   3. Modify the velocity vectors to reflect the effects of the collision.
;;      This involves:
;;        a. computing the velocity of the center of mass of the whole system
;;           along direction theta
;;        b. updating the along-theta components of the two velocity vectors.
;;   4. Convert from the theta-based vector representation of velocity back to
;;      the usual speed/heading representation for each particle.
;;   5. Perform final cleanup and update derived quantities.
to collide-with [ other-particle ] ;; particle procedure

  ;; local copies of other-particle's relevant quantities
  ;mass2 speed2 heading2

  ;; quantities used in the collision itself
  ;theta   ;; heading of vector from my center to the center of other-particle.
  ;v1t     ;; velocity of self along direction theta
  ;v1l     ;; velocity of self perpendicular to theta
  ;v2t v2l ;; velocity of other-particle, represented in the same way
  ;vcm     ;; velocity of the center of mass of the colliding particles,
           ;;   along direction theta

  ;;; PHASE 1: initial setup

  ;; for convenience, grab some quantities from other-particle
  let mass2 [mass] of other-particle
  let speed2 [speed] of other-particle
  let heading2 [heading] of other-particle

  ;; since particles are modeled as zero-size points, theta isn't meaningfully
  ;; defined. we can assign it randomly without affecting the model's outcome.
  let theta (random-float 360)



  ;;; PHASE 2: convert velocities to theta-based vector representation

  ;; now convert my velocity from speed/heading representation to components
  ;; along theta and perpendicular to theta
  let v1t (speed * cos (theta - heading))
  let v1l (speed * sin (theta - heading))

  ;; do the same for other-particle
  let v2t (speed2 * cos (theta - heading2))
  let v2l (speed2 * sin (theta - heading2))



  ;;; PHASE 3: manipulate vectors to implement collision

  ;; compute the velocity of the system's center of mass along theta
  let vcm (((mass * v1t) + (mass2 * v2t)) / (mass + mass2) )

  ;; now compute the new velocity for each particle along direction theta.
  ;; velocity perpendicular to theta is unaffected by a collision along theta,
  ;; so the next two lines actually implement the collision itself, in the
  ;; sense that the effects of the collision are exactly the following changes
  ;; in particle velocity.
  set v1t (2 * vcm - v1t)
  set v2t (2 * vcm - v2t)



  ;;; PHASE 4: convert back to normal speed/heading

  ;; now convert my velocity vector into my new speed and heading
  set speed sqrt ((v1t * v1t) + (v1l * v1l))
  ;; if the magnitude of the velocity vector is 0, atan is undefined. but
  ;; speed will be 0, so heading is irrelevant anyway. therefore, in that
  ;; case we'll just leave it unmodified.
  if v1l != 0 or v1t != 0
    [ set heading (theta - (atan v1l v1t)) ]

  ;; and do the same for other-particle
  ask other-particle [
    set speed sqrt ((v2t * v2t) + (v2l * v2l))
    if v2l != 0 or v2t != 0
      [ set heading (theta - (atan v2l v2t)) ]
  ]


  ;; PHASE 5: final updates

  ;; now recolor, since color is based on quantities that may have changed
  recolor
  ask other-particle
    [ recolor ]
end

to recolor  ;; particle procedure
  ifelse speed < (0.5 * 10)
  [
    set color blue
  ]
  [
    ifelse speed > (1.5 * 10)
      [ set color red ]
      [ set color green ]
  ]
end

;;;
;;; drawing procedures
;;;

;; draws the box
to make-box
  ask patches with [ ((abs pxcor = box-edge) and (abs pycor <= box-edge)) or
                     ((abs pycor = box-edge) and (abs pxcor <= box-edge)) ]
    [ set pcolor yellow ]
  ask patches with [pycor = 0 and pxcor < (1 - box-edge)]
  [
    set pcolor yellow - 5  ;; trick the bounce code so particles don't go into the inlet
    ask patch-at 0  1 [ set pcolor yellow ]
    ask patch-at 0 -1 [ set pcolor yellow ]
  ]
end

;; creates initial particles
to make-particles [number]
  create-particles number
  [
    setup-particle
    set speed random-float 20
    random-position
    recolor
  ]
  calculate-tick-length
end

;; adds particles from the left
to add-particles-side
  if particles-to-add > 0
    [ create-particles particles-to-add
        [ setup-particle
          setxy (- box-edge) 0
          set heading 90 ;; east
          rt 45 - random-float 90
          recolor

        ]
      if announce-add-particles? [ sound:play-note "tubular bells" 59 90 0.3 ]  ;;  announce when particles are added
      set particles-to-add 0
      calculate-tick-length
    ]
end

;; called by user from command center;
;; adds particles in middle
to add-particles-middle [n]
  create-particles n
    [ setup-particle
      set new? true
      recolor ]
  ;; add the new particles to an agentset, so they
  ;; are accessible to the user from the command
  ;; center, e.g. "ask new-particles [ ... ]"
  set new-particles particles with [new?]
  calculate-tick-length
end

to setup-particle  ;; particle procedure
  set new? false
  set speed 10
  set mass 1.0
  set last-collision nobody
  set wall-hits 0
  set momentum-difference 0
end

;; place particle at random location inside the box.
to random-position ;; particle procedure
  setxy ((1 - box-edge) + random-float ((2 * box-edge) - 2))
        ((1 - box-edge) + random-float ((2 * box-edge) - 2))
end

to-report last-n [n the-list]
 ifelse n >= length the-list
   [ report the-list ]
   [ report last-n n butfirst the-list ]
end

to fade-patches
  let trace-patches patches with [ shade-of? pcolor red or shade-of? pcolor  blue or shade-of? pcolor green ]
  if any? trace-patches
    [ ask trace-patches
      [ set pcolor ( pcolor - 0.05 )
        if (pcolor mod 10 < 1)
          [ set pcolor black ] ] ]
end

to sing-one-particle-speed     ;; procedure for listening to one particle's speed - tone is a function of speed
   ifelse single-particle-speed?
      [  ifelse (three-speed > 3)
             [ sound:stop-note "oboe" (80 - 120 / ( three-speed ))
               sound:stop-note "oboe" 50
               sound:start-note "oboe" (80 - 120 / ( [speed] of particle 3 )) single-particle-loudness
             ]
             [
               sound:stop-note "oboe" (80 - 120 / ( three-speed ))
               sound:stop-note "oboe" 50
               sound:start-note "oboe" 50 single-particle-loudness + 20
             ]
               set three-speed [speed] of particle 3
       ]
       [
         ifelse (three-speed > 3)
           [ sound:stop-note "oboe" (80 - 120 / ( three-speed ))]
           [ sound:stop-note "oboe" 50 ]
       ]
end

to sing-real-time ;; real time is drummed at a regular interval
       every real-time-pacer [ sound:play-note "sci-fi" 30 60 0.3 ]
end

to sing-pressure  ;;  pressure is sonified by a recorder with the tone a function of pressure
  if ( abs ( pressure-now - pressure ) > 0 and pressure-now != 0)
          [ sound:stop-note "recorder" ( 100 - 2000 / pressure-now )
            sound:stop-note "recorder" ( 30 ) ]
  set pressure-now pressure
  ifelse (pressure > 30 )
        [ sound:start-note "recorder" ( 100 - 2000 / pressure ) pressure-loudness ]
        [ sound:start-note "recorder" ( 30 ) pressure-loudness + 10 ]
end


; Copyright 2004 Uri Wilensky.
; See Info tab for full copyright and license.]]></code><modelSettings snapToGrid="true"/><hubnet/></model>
