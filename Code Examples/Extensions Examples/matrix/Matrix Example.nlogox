<?xml version='1.0' encoding='UTF-8'?>
<model xmlns="http://ccl.northwestern.edu/netlogo/6.1"><version><![CDATA[NetLogo 6.0.2]]></version><previewCommands><manual/></previewCommands><info><![CDATA[## WHAT IS IT?

This model demonstrates basic usage of the matrix extension.

<!-- 2011 -->]]></info><systemDynamics/><linkShapes><linkShape curviness="0.0" name="default"><line stroke-dasharray="0.0,1.0" isVisible="false" offset="-0.2"/><line stroke-dasharray="1.0,0.0" isVisible="true" offset="0.0"/><line stroke-dasharray="0.0,1.0" isVisible="false" offset="0.2"/><indicator editableColorIndex="0" rotatable="true" name="link direction"><elements><line marked="true" filled="false" color="#8D8D8D" y2="180" x2="90" y1="150" x1="150"/><line marked="true" filled="false" color="#8D8D8D" y2="180" x2="210" y1="150" x1="150"/></elements></indicator></linkShape></linkShapes><widgets><view frameRate="30.0" showTickCounter="true" fontSize="10" bottom="112" right="580" top="77" left="26"><dimensions maxPycor="0" minPycor="0" maxPxcor="10" minPxcor="-10" wrapInY="true" wrapInX="true" patchSize="26.0"/><tickCounterLabel><![CDATA[ticks]]></tickCounterLabel></view><button ticksEnabled="false" forever="false" bottom="57" right="140" top="24" left="74"><source><![CDATA[setup]]></source></button><output fontSize="12" bottom="465" right="739" top="69" left="9"/></widgets><experiments/><shapes><turtleShape editableColorIndex="0" rotatable="true" name="default"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,5 40,250 150,205 260,250"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="airplane"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,0 135,15 120,60 120,105 15,165 15,195 120,180 135,240 105,270 120,285 150,270 180,285 210,270 165,240 180,180 285,195 285,165 180,105 180,60 165,15"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="arrow"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,0 0,150 105,150 105,293 195,293 195,150 300,150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="box"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,285 285,225 285,75 150,135"/><polygon marked="true" filled="true" color="#8D8D8D" points="150,135 15,75 150,15 285,75"/><polygon marked="true" filled="true" color="#8D8D8D" points="15,75 15,225 150,285 150,135"/><line marked="false" filled="false" color="#000000" y2="135" x2="150" y1="285" x1="150"/><line marked="false" filled="false" color="#000000" y2="75" x2="15" y1="135" x1="150"/><line marked="false" filled="false" color="#000000" y2="75" x2="285" y1="135" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="bug"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="182" cx="96"/><circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="127" cx="110"/><circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="75" cx="110"/><line marked="true" filled="false" color="#8D8D8D" y2="30" x2="80" y1="100" x1="150"/><line marked="true" filled="false" color="#8D8D8D" y2="30" x2="220" y1="100" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="butterfly"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,165 209,199 225,225 225,255 195,270 165,255 150,240"/><polygon marked="true" filled="true" color="#8D8D8D" points="150,165 89,198 75,225 75,255 105,270 135,255 150,240"/><polygon marked="true" filled="true" color="#8D8D8D" points="139,148 100,105 55,90 25,90 10,105 10,135 25,180 40,195 85,194 139,163"/><polygon marked="true" filled="true" color="#8D8D8D" points="162,150 200,105 245,90 275,90 290,105 290,135 275,180 260,195 215,195 162,165"/><polygon marked="false" filled="true" color="#000000" points="150,255 135,225 120,150 135,120 150,105 165,120 180,150 165,225"/><circle marked="false" filled="true" color="#000000" diameter="30" cy="90" cx="135"/><line marked="false" filled="false" color="#000000" y2="60" x2="195" y1="105" x1="150"/><line marked="false" filled="false" color="#000000" y2="60" x2="105" y1="105" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="car"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="300,180 279,164 261,144 240,135 226,132 213,106 203,84 185,63 159,50 135,50 75,60 0,150 0,165 0,225 300,225 300,180"/><circle marked="false" filled="true" color="#000000" diameter="90" cy="180" cx="180"/><circle marked="false" filled="true" color="#000000" diameter="90" cy="180" cx="30"/><polygon marked="false" filled="true" color="#000000" points="162,80 132,78 134,135 209,135 194,105 189,96 180,89"/><circle marked="true" filled="true" color="#8D8D8D" diameter="58" cy="195" cx="47"/><circle marked="true" filled="true" color="#8D8D8D" diameter="58" cy="195" cx="195"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="circle"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="circle 2"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/><circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="cow"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="200,193 197,249 179,249 177,196 166,187 140,189 93,191 78,179 72,211 49,209 48,181 37,149 25,120 25,89 45,72 103,84 179,75 198,76 252,64 272,81 293,103 285,121 255,121 242,118 224,167"/><polygon marked="true" filled="true" color="#8D8D8D" points="73,210 86,251 62,249 48,208"/><polygon marked="true" filled="true" color="#8D8D8D" points="25,114 16,195 9,204 23,213 25,200 39,123"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="cylinder"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="dot"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="120" cy="90" cx="90"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="face happy"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="8" cx="8"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/><polygon marked="false" filled="true" color="#000000" points="150,255 90,239 62,213 47,191 67,179 90,203 109,218 150,225 192,218 210,203 227,181 251,194 236,217 212,240"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="face neutral"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="7" cx="8"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/><rect marked="false" filled="true" color="#000000" height="30" width="180" y="195" x="60"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="face sad"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="8" cx="8"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/><circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/><polygon marked="false" filled="true" color="#000000" points="150,168 90,184 62,210 47,232 67,244 90,220 109,205 150,198 192,205 210,220 227,242 251,229 236,206 212,183"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="fish"><elements><polygon marked="false" filled="true" color="#FFFFFF" points="44,131 21,87 15,86 0,120 15,150 0,180 13,214 20,212 45,166"/><polygon marked="false" filled="true" color="#FFFFFF" points="135,195 119,235 95,218 76,210 46,204 60,165"/><polygon marked="false" filled="true" color="#FFFFFF" points="75,45 83,77 71,103 86,114 166,78 135,60"/><polygon marked="true" filled="true" color="#8D8D8D" points="30,136 151,77 226,81 280,119 292,146 292,160 287,170 270,195 195,210 151,212 30,166"/><circle marked="false" filled="true" color="#000000" diameter="30" cy="106" cx="215"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="flag"><elements><rect marked="true" filled="true" color="#8D8D8D" height="285" width="15" y="15" x="60"/><polygon marked="true" filled="true" color="#8D8D8D" points="90,150 270,90 90,30"/><line marked="true" filled="false" color="#8D8D8D" y2="135" x2="90" y1="135" x1="75"/><line marked="true" filled="false" color="#8D8D8D" y2="45" x2="90" y1="45" x1="75"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="flower"><elements><polygon marked="false" filled="true" color="#59B03C" points="135,120 165,165 180,210 180,240 150,300 165,300 195,240 195,195 165,135"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="132" cx="85"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="147" cx="130"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="85" cx="192"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="40" cx="85"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="40" cx="177"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="132" cx="177"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="85" cx="70"/><circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="25" cx="130"/><circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="51" cx="96"/><circle marked="false" filled="true" color="#000000" diameter="74" cy="68" cx="113"/><polygon marked="false" filled="true" color="#59B03C" points="189,233 219,188 249,173 279,188 234,218"/><polygon marked="false" filled="true" color="#59B03C" points="180,255 150,210 105,210 75,240 135,240"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="house"><elements><rect marked="true" filled="true" color="#8D8D8D" height="165" width="210" y="120" x="45"/><rect marked="false" filled="true" color="#000000" height="75" width="60" y="210" x="120"/><polygon marked="true" filled="true" color="#8D8D8D" points="15,120 150,15 285,120"/><line marked="false" filled="false" color="#000000" y2="120" x2="270" y1="120" x1="30"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="leaf"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,210 135,195 120,210 60,210 30,195 60,180 60,165 15,135 30,120 15,105 40,104 45,90 60,90 90,105 105,120 120,120 105,60 120,60 135,30 150,15 165,30 180,60 195,60 180,120 195,120 210,105 240,90 255,90 263,104 285,105 270,120 285,135 240,165 240,180 270,195 240,210 180,210 165,195"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,195 135,240 120,255 105,255 105,285 135,285 165,240 165,195"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="line"><elements><line marked="true" filled="false" color="#8D8D8D" y2="300" x2="150" y1="0" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="line half"><elements><line marked="true" filled="false" color="#8D8D8D" y2="150" x2="150" y1="0" x1="150"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="pentagon"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,15 15,120 60,285 240,285 285,120"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="person"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="5" cx="110"/><polygon marked="true" filled="true" color="#8D8D8D" points="105,90 120,195 90,285 105,300 135,300 150,225 165,300 195,300 210,285 180,195 195,90"/><rect marked="true" filled="true" color="#8D8D8D" height="15" width="45" y="79" x="127"/><polygon marked="true" filled="true" color="#8D8D8D" points="195,90 240,150 225,180 165,105"/><polygon marked="true" filled="true" color="#8D8D8D" points="105,90 60,150 75,180 135,105"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="plant"><elements><rect marked="true" filled="true" color="#8D8D8D" height="210" width="30" y="90" x="135"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,255 90,210 45,195 75,255 135,285"/><polygon marked="true" filled="true" color="#8D8D8D" points="165,255 210,210 255,195 225,255 165,285"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,180 90,135 45,120 75,180 135,210"/><polygon marked="true" filled="true" color="#8D8D8D" points="165,180 165,210 225,180 255,120 210,135"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,105 90,60 45,45 75,105 135,135"/><polygon marked="true" filled="true" color="#8D8D8D" points="165,105 165,135 225,105 255,45 210,60"/><polygon marked="true" filled="true" color="#8D8D8D" points="135,90 120,45 150,15 180,45 165,90"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="square"><elements><rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="square 2"><elements><rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/><rect marked="false" filled="true" color="#000000" height="180" width="180" y="60" x="60"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="star"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="151,1 185,108 298,108 207,175 242,282 151,216 59,282 94,175 3,108 116,108"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="target"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/><circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/><circle marked="true" filled="true" color="#8D8D8D" diameter="180" cy="60" cx="60"/><circle marked="false" filled="true" color="#000000" diameter="120" cy="90" cx="90"/><circle marked="true" filled="true" color="#8D8D8D" diameter="60" cy="120" cx="120"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="tree"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="94" cy="3" cx="118"/><rect marked="false" filled="true" color="#9D6E48" height="105" width="60" y="195" x="120"/><circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="21" cx="65"/><circle marked="true" filled="true" color="#8D8D8D" diameter="127" cy="41" cx="116"/><circle marked="true" filled="true" color="#8D8D8D" diameter="120" cy="90" cx="45"/><circle marked="true" filled="true" color="#8D8D8D" diameter="152" cy="74" cx="104"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="triangle"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,30 15,255 285,255"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="triangle 2"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="150,30 15,255 285,255"/><polygon marked="false" filled="true" color="#000000" points="151,99 225,223 75,224"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="truck"><elements><rect marked="true" filled="true" color="#8D8D8D" height="142" width="191" y="45" x="4"/><polygon marked="true" filled="true" color="#8D8D8D" points="296,193 296,150 259,134 244,104 208,104 207,194"/><rect marked="false" filled="true" color="#FFFFFF" height="45" width="0" y="60" x="195"/><polygon marked="false" filled="true" color="#000000" points="238,112 252,141 219,141 218,112"/><circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="234"/><rect marked="true" filled="true" color="#8D8D8D" height="9" width="33" y="185" x="181"/><circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="144"/><circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="24"/><circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="24"/><circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="144"/><circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="234"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="true" name="turtle"><elements><polygon marked="false" filled="true" color="#59B03C" points="215,204 240,233 246,254 228,266 215,252 193,210"/><polygon marked="false" filled="true" color="#59B03C" points="195,90 225,75 245,75 260,89 269,108 261,124 240,105 225,105 210,105"/><polygon marked="false" filled="true" color="#59B03C" points="105,90 75,75 55,75 40,89 31,108 39,124 60,105 75,105 90,105"/><polygon marked="false" filled="true" color="#59B03C" points="132,85 134,64 107,51 108,17 150,2 192,18 192,52 169,65 172,87"/><polygon marked="false" filled="true" color="#59B03C" points="85,204 60,233 54,254 72,266 85,252 107,210"/><polygon marked="true" filled="true" color="#8D8D8D" points="119,75 179,75 209,101 224,135 220,225 175,261 128,261 81,224 74,135 88,99"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="wheel"><elements><circle marked="true" filled="true" color="#8D8D8D" diameter="294" cy="3" cx="3"/><circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/><line marked="true" filled="false" color="#8D8D8D" y2="15" x2="150" y1="285" x1="150"/><line marked="true" filled="false" color="#8D8D8D" y2="150" x2="285" y1="150" x1="15"/><circle marked="true" filled="true" color="#8D8D8D" diameter="60" cy="120" cx="120"/><line marked="true" filled="false" color="#8D8D8D" y2="269" x2="79" y1="40" x1="216"/><line marked="true" filled="false" color="#8D8D8D" y2="221" x2="269" y1="84" x1="40"/><line marked="true" filled="false" color="#8D8D8D" y2="79" x2="269" y1="216" x1="40"/><line marked="true" filled="false" color="#8D8D8D" y2="269" x2="221" y1="40" x1="84"/></elements></turtleShape><turtleShape editableColorIndex="0" rotatable="false" name="x"><elements><polygon marked="true" filled="true" color="#8D8D8D" points="270,75 225,30 30,225 75,270"/><polygon marked="true" filled="true" color="#8D8D8D" points="30,75 75,30 270,225 225,270"/></elements></turtleShape></shapes><code><![CDATA[extensions [ matrix ]

to setup
  clear-all

  let m1 matrix:from-column-list [[1 4 7][2 5 8][3 6 9]] ; 3x3 matrix
  let m2 matrix:from-row-list [[0 0 0][1 1 1][2 2 2][3 3 3]] ; 4x3 matrix
  let m3 matrix:make-identity 2 ; 2x2 identity matrix
  let m4 matrix:make-constant 5 1 100 ; 5x1 matrix, containing 100 in each entry

  output-print "m1"
  output-print m1
  output-print "m2"
  output-print m2
  output-print "m3"
  output-print m3
  output-print "m4"
  output-print m4

  output-print matrix:get m1 1 2   ; =>  (row 1, column 2), result is 6

  let mRef m2              ; mRef is another reference to the same matrix as m2
  let mCopy matrix:copy m2 ; => mCopy = new copy, not a reference to m2!

  matrix:set m2 0 1 9      ; Note mCopy remains unchanged, but m2 and mRef change

  output-print "m2 after matrix:set m2 0 1 9"
  output-print m2 ; => matrix: [[0 9 0][1 1 1][2 2 2][3 3 3]]
  output-print "mRef after matrix:set m2 0 1 9"
  output-print mRef ; same as above
  output-print "mCopy after matrix:set m2 0 1 9"
  output-print mCopy ; different -- no 9 in the first row.

  output-print "the dimensions of m4"
  output-print matrix:dimensions m4 ; => [5,1]
  output-print "m1 to a row list"
  output-print matrix:to-row-list m1 ; => [[1 2 3] [4 5 6] [7 8 9]]
  output-print "m4 to a column list"
  output-print matrix:to-column-list m4 ; => [[100][100][100][100][100]]

  let m5 matrix:plus-scalar m3 1
  output-print "m5 = m3 + scalar 1"
  output-print m5 ; => matrix:  [[2 1][1 2]]

  output-print "m3 + m5"
  output-print matrix:plus m3 m5 ; => [[3 1][1 3]]

  output-print "m5 x scalar 10"
  output-print matrix:times-scalar m5 10 ; => [[20 10][10 20]]
  output-print "matrix:times [[1 2][3 4]] [[0 1][-1 0]]"
  output-print matrix:times (matrix:from-row-list [[1 2][3 4]])
    (matrix:from-row-list [[0 1][-1 0]])  ; => {{matrix:  [ [ -2 1 ][ -4 3 ] ]}}

  output-print "matrix:times-element-wise [[1 2][3 4]] [[0 1][-1 0]]"
  output-print matrix:times-element-wise (matrix:from-row-list [[1 2][3 4]])
    (matrix:from-row-list [[0 1][-1 0]])  ; => {{matrix:    [[0 2][-3 0] ]}}

  output-print "matrix:inverse [[2 2][2 0]]"
  output-print matrix:inverse (matrix:from-row-list [[2 2][2 0]])  ; => {{matrix:  [ [ 0 0.5 ][ 0.5 -0.5 ] ]}}
  carefully [
    output-print matrix:inverse matrix:from-row-list [[0 0] [0 0]]
  ][
    output-print "Can't invert matrix: [[0 0] [0 0]]!"
  ]

  output-print "matrix:transpose m2"
  output-print matrix:transpose m2 ; => matrix: [[0 1 2 3][9 1 2 3][0 1 2 3]]
  output-print "matrix:submatrix m1 0 1 2 3"
  output-print matrix:submatrix m1 0 1 2 3 ; matrix, rowStart, colStart, rowEnd, colEnd
                                           ; rows from 0 (inclusive) to 2 (exclusive),
                                           ; columns from 1 (inclusive) to 3 (exclusive)
                                           ; => matrix: [[2 3][5 6]]
  output-print "matrix:get-row m1 2"
  output-print matrix:get-row m1 1         ; puts the second row of m1 (starting from 0) in a simple
                                           ; NetLogo list.  => [4 5 6]
  output-print "matrix:get-column m1 2"
  output-print matrix:get-column m1 1      ; puts the second column of m1 (starting from 0) in a simple
                                           ; NetLogo list.  => [2 5 8]

  output-print "create a new matrix m6 from row list [[0 0 0][1 1 1][2 2 2][3 3 3]]"
  let m6 matrix:from-row-list [[0 0 0][1 1 1][2 2 2][3 3 3]] ; 4x3 matrix
  output-print m6
  output-print "matrix:set-row m6 1 [20 21 22]"
  matrix:set-row m6 1 [20 21 22]  ; => [[0 0 0][20 21 22][2 2 2][3 3 3]]
  output-print m6
  output-print "matrix:set-column m6 2 [10 11 12 13]"
  matrix:set-column m6 2 [10 11 12 13]  ; => [[0 0 10][20 21 11][2 2 12][3 3 13]]
  output-print m6
  output-print "matrix:swap-rows m6 1 2"
  matrix:swap-rows m6 1 2  ; => [[0 0 10][2 2 12][20 21 11][3 3 13]]
  output-print m6
  output-print "matrix:swap-columns m6 2 0"
  matrix:swap-columns m6 2 0  ; => [[10 0 0][12 2 2][11 21 20][13 3 3]]
  output-print m6

  output-print "matrix:real-eigenvalues m5"
  ; recall m5 = [[2 1][1 2]]
  output-print matrix:real-eigenvalues m5 ; => [1.0000000000000002 3] NOTE: accuracy not perfect.
  output-print "matrix:imaginary-eigenvalues m5"
  output-print matrix:imaginary-eigenvalues m5 ; => [ 0 0 ]
  output-print "matrix:eigenvectors m5"
  output-print matrix:eigenvectors m5 ; => matrix:  [[0.707... 0.707...][-0.707... 0.707...]] (.707... = sqrt(2)/2 )

  let A matrix:from-row-list [[1 2][3 4]]
  let B matrix:from-row-list [[-2 1][-4 3]]
  output-print "matrix:solve [[1 2][3 4]] [[-2 1][-4 3]]"
  output-print matrix:solve A B ; => [[0 1][-1 0]]
                                ;  Solve is sort of like matrix division.
                                ;  That is, it tries to find matrix X such that  A * X = B.
                                ;  It gives a "least-squares" solution, if no perfect solution exists.

  output-print "matrix:set-and-report m1 2 2 0"
  output-print matrix:set-and-report m1 2 2 0  ;; m1 is unchanged, a new matrix is reported.
  output-print "m1 is unchanged"
  output-print m1
  set m1 matrix:set-and-report m1 2 2 0        ;; can also change m1 itself, using the reporter.

  output-print "matrix:forecast-linear-growth [20 25 28 32 35 39]  => ?? linear growth rate"
  output-print matrix:forecast-linear-growth [20 25 28 32 35 39]  ; a linear extrapolation of the next item in the list.

  output-print "matrix:forecast-compound-growth [20 25 28 32 35 39] => ~13.7% compound growth rate"
  output-print matrix:forecast-compound-growth [20 25 28 32 35 39]
  output-print "matrix:forecast-compound-growth [2 2.2 2.42 2.662 2.9282] => 10.0% compound growth rate"
  output-print matrix:forecast-compound-growth [2 2.2 2.42 2.662 2.9282]
  output-print "matrix:forecast-compound-growth [4 3.6 3.24 2.916 2.6244] => minus 10.0% compound growth rate"
  output-print matrix:forecast-compound-growth [4 3.6 3.24 2.916 2.6244]

  output-print "matrix:forecast-continuous-growth [20 25 28 32 35 39] => ~12.8% continuous growth rate"
  output-print matrix:forecast-continuous-growth [20 25 28 32 35 39]
  output-print "matrix:forecast-continuous-growth [2 2.2 2.42 2.662 2.9282] => ~9.5% continuous growth rate"
  output-print matrix:forecast-continuous-growth [2 2.2 2.42 2.662 2.9282] ; a compound growth extrapolation of the next item in the list.
  output-print "matrix:forecast-continuous-growth [4 3.6 3.24 2.916 2.6244] => ~ minus 10.5% continuous growth rate"
  output-print matrix:forecast-continuous-growth [4 3.6 3.24 2.916 2.6244]

  output-print "matrix:regress matrix:from-column-list [[2 4 5 8 10] [3 4 3 7 8] [2 3 5 8 9]]"
  output-print matrix:regress matrix:from-column-list [[2 4 5 8 10] [3 4 3 7 8] [2 3 5 8 9]]
  output-print "matrix:regress matrix:from-row-list [[2 3 2] [4 4 3] [5 3 5] [8 7 8] [10 8 9]]"
  output-print matrix:regress matrix:from-row-list [[2 3 2] [4 4 3] [5 3 5] [8 7 8] [10 8 9]]

  ; The forecasts may also be done using regress.  Here they are. Note that the next value
  ; to be forecast is for the value after the 6 observations supplied. But since lists begin with position
  ; zero, that will be for position 6.
  ; this is what happens inside matrix:forecast-linear-growth.
  output-print "long way to do the linear forecast using regress"
  let data-list [20 25 28 32 35 39]
  let indep-var (n-values length data-list [ n -> n ]) ; 0,1,2...,5
  let lin-output matrix:regress matrix:from-column-list (list data-list indep-var)
  let lincnst item 0 (item 0 lin-output)
  let linslpe item 1 (item 0 lin-output)
  let linR2   item 0 (item 1 lin-output)
  output-print (list (lincnst + linslpe * 6) (lincnst) (linslpe) (linR2))

  ; this is what happens inside matrix:forecast-compound-growth.
  output-print "long way to do the compound-growth forecast using regress"
  let com-log-data-list  (map [ n -> ln n ] [20 25 28 32 35 39])
  let com-indep-var2 (n-values length com-log-data-list [ n -> n ]) ; 0,1,2...,5
  let com-output matrix:regress matrix:from-column-list (list com-log-data-list com-indep-var2)
  let comcnst exp item 0 (item 0 com-output)
  let comrate exp item 1 (item 0 com-output)
  let comR2       item 0 (item 1 com-output)
  output-print (list (comcnst * comrate ^ 6) (comcnst) (comrate) (comR2))

  ; this is what happens inside matrix:forecast-continuous-growth.
  output-print "long way to do the continuous-growth forecast using regress"
  let con-log-data-list  (map [ n -> ln n ] [20 25 28 32 35 39])
  let con-indep-var2 (n-values length con-log-data-list [ n -> n ]) ; 0,1,2...,5
  let con-output matrix:regress matrix:from-column-list (list con-log-data-list con-indep-var2)
  let concnst exp item 0 (item 0 con-output)
  let conrate     item 1 (item 0 con-output)
  let conR2       item 0 (item 1 con-output)
  output-print (list (concnst * exp (conrate * 6)) (concnst) (conrate) (conR2))


  ;;NOTE: The matrix extension could be extended with more functionality,
  ;;      since the Jama library it is based on can do much more
  ;;        (e.g. LU, Cholesky, SV decompositions)

end


; Public Domain:
; To the extent possible under law, Uri Wilensky has waived all
; copyright and related or neighboring rights to this model.]]></code><modelSettings/><hubnet/></model>
